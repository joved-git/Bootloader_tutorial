
Part_3-Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002834  080401d0  080401d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08042a04  08042a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042a74  08042a74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08042a74  08042a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042a7c  08042a7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042a7c  08042a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08042a80  08042a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08042a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08042af4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08042af4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008216  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001522  00000000  00000000  000282b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  000297d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00029e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecdb  00000000  00000000  0002a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a76  00000000  00000000  0004916b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba65b  00000000  00000000  00051be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c23c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd0  00000000  00000000  0010c28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401d0 <__do_global_dtors_aux>:
 80401d0:	b510      	push	{r4, lr}
 80401d2:	4c05      	ldr	r4, [pc, #20]	; (80401e8 <__do_global_dtors_aux+0x18>)
 80401d4:	7823      	ldrb	r3, [r4, #0]
 80401d6:	b933      	cbnz	r3, 80401e6 <__do_global_dtors_aux+0x16>
 80401d8:	4b04      	ldr	r3, [pc, #16]	; (80401ec <__do_global_dtors_aux+0x1c>)
 80401da:	b113      	cbz	r3, 80401e2 <__do_global_dtors_aux+0x12>
 80401dc:	4804      	ldr	r0, [pc, #16]	; (80401f0 <__do_global_dtors_aux+0x20>)
 80401de:	f3af 8000 	nop.w
 80401e2:	2301      	movs	r3, #1
 80401e4:	7023      	strb	r3, [r4, #0]
 80401e6:	bd10      	pop	{r4, pc}
 80401e8:	20000070 	.word	0x20000070
 80401ec:	00000000 	.word	0x00000000
 80401f0:	080429ec 	.word	0x080429ec

080401f4 <frame_dummy>:
 80401f4:	b508      	push	{r3, lr}
 80401f6:	4b03      	ldr	r3, [pc, #12]	; (8040204 <frame_dummy+0x10>)
 80401f8:	b11b      	cbz	r3, 8040202 <frame_dummy+0xe>
 80401fa:	4903      	ldr	r1, [pc, #12]	; (8040208 <frame_dummy+0x14>)
 80401fc:	4803      	ldr	r0, [pc, #12]	; (804020c <frame_dummy+0x18>)
 80401fe:	f3af 8000 	nop.w
 8040202:	bd08      	pop	{r3, pc}
 8040204:	00000000 	.word	0x00000000
 8040208:	20000074 	.word	0x20000074
 804020c:	080429ec 	.word	0x080429ec

08040210 <strlen>:
 8040210:	4603      	mov	r3, r0
 8040212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040216:	2a00      	cmp	r2, #0
 8040218:	d1fb      	bne.n	8040212 <strlen+0x2>
 804021a:	1a18      	subs	r0, r3, r0
 804021c:	3801      	subs	r0, #1
 804021e:	4770      	bx	lr

08040220 <memchr>:
 8040220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040224:	2a10      	cmp	r2, #16
 8040226:	db2b      	blt.n	8040280 <memchr+0x60>
 8040228:	f010 0f07 	tst.w	r0, #7
 804022c:	d008      	beq.n	8040240 <memchr+0x20>
 804022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040232:	3a01      	subs	r2, #1
 8040234:	428b      	cmp	r3, r1
 8040236:	d02d      	beq.n	8040294 <memchr+0x74>
 8040238:	f010 0f07 	tst.w	r0, #7
 804023c:	b342      	cbz	r2, 8040290 <memchr+0x70>
 804023e:	d1f6      	bne.n	804022e <memchr+0xe>
 8040240:	b4f0      	push	{r4, r5, r6, r7}
 8040242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804024a:	f022 0407 	bic.w	r4, r2, #7
 804024e:	f07f 0700 	mvns.w	r7, #0
 8040252:	2300      	movs	r3, #0
 8040254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040258:	3c08      	subs	r4, #8
 804025a:	ea85 0501 	eor.w	r5, r5, r1
 804025e:	ea86 0601 	eor.w	r6, r6, r1
 8040262:	fa85 f547 	uadd8	r5, r5, r7
 8040266:	faa3 f587 	sel	r5, r3, r7
 804026a:	fa86 f647 	uadd8	r6, r6, r7
 804026e:	faa5 f687 	sel	r6, r5, r7
 8040272:	b98e      	cbnz	r6, 8040298 <memchr+0x78>
 8040274:	d1ee      	bne.n	8040254 <memchr+0x34>
 8040276:	bcf0      	pop	{r4, r5, r6, r7}
 8040278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804027c:	f002 0207 	and.w	r2, r2, #7
 8040280:	b132      	cbz	r2, 8040290 <memchr+0x70>
 8040282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040286:	3a01      	subs	r2, #1
 8040288:	ea83 0301 	eor.w	r3, r3, r1
 804028c:	b113      	cbz	r3, 8040294 <memchr+0x74>
 804028e:	d1f8      	bne.n	8040282 <memchr+0x62>
 8040290:	2000      	movs	r0, #0
 8040292:	4770      	bx	lr
 8040294:	3801      	subs	r0, #1
 8040296:	4770      	bx	lr
 8040298:	2d00      	cmp	r5, #0
 804029a:	bf06      	itte	eq
 804029c:	4635      	moveq	r5, r6
 804029e:	3803      	subeq	r0, #3
 80402a0:	3807      	subne	r0, #7
 80402a2:	f015 0f01 	tst.w	r5, #1
 80402a6:	d107      	bne.n	80402b8 <memchr+0x98>
 80402a8:	3001      	adds	r0, #1
 80402aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ae:	bf02      	ittt	eq
 80402b0:	3001      	addeq	r0, #1
 80402b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402b6:	3001      	addeq	r0, #1
 80402b8:	bcf0      	pop	{r4, r5, r6, r7}
 80402ba:	3801      	subs	r0, #1
 80402bc:	4770      	bx	lr
 80402be:	bf00      	nop

080402c0 <__aeabi_uldivmod>:
 80402c0:	b953      	cbnz	r3, 80402d8 <__aeabi_uldivmod+0x18>
 80402c2:	b94a      	cbnz	r2, 80402d8 <__aeabi_uldivmod+0x18>
 80402c4:	2900      	cmp	r1, #0
 80402c6:	bf08      	it	eq
 80402c8:	2800      	cmpeq	r0, #0
 80402ca:	bf1c      	itt	ne
 80402cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80402d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80402d4:	f000 b974 	b.w	80405c0 <__aeabi_idiv0>
 80402d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402e0:	f000 f806 	bl	80402f0 <__udivmoddi4>
 80402e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402ec:	b004      	add	sp, #16
 80402ee:	4770      	bx	lr

080402f0 <__udivmoddi4>:
 80402f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402f4:	9d08      	ldr	r5, [sp, #32]
 80402f6:	4604      	mov	r4, r0
 80402f8:	468e      	mov	lr, r1
 80402fa:	2b00      	cmp	r3, #0
 80402fc:	d14d      	bne.n	804039a <__udivmoddi4+0xaa>
 80402fe:	428a      	cmp	r2, r1
 8040300:	4694      	mov	ip, r2
 8040302:	d969      	bls.n	80403d8 <__udivmoddi4+0xe8>
 8040304:	fab2 f282 	clz	r2, r2
 8040308:	b152      	cbz	r2, 8040320 <__udivmoddi4+0x30>
 804030a:	fa01 f302 	lsl.w	r3, r1, r2
 804030e:	f1c2 0120 	rsb	r1, r2, #32
 8040312:	fa20 f101 	lsr.w	r1, r0, r1
 8040316:	fa0c fc02 	lsl.w	ip, ip, r2
 804031a:	ea41 0e03 	orr.w	lr, r1, r3
 804031e:	4094      	lsls	r4, r2
 8040320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040324:	0c21      	lsrs	r1, r4, #16
 8040326:	fbbe f6f8 	udiv	r6, lr, r8
 804032a:	fa1f f78c 	uxth.w	r7, ip
 804032e:	fb08 e316 	mls	r3, r8, r6, lr
 8040332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040336:	fb06 f107 	mul.w	r1, r6, r7
 804033a:	4299      	cmp	r1, r3
 804033c:	d90a      	bls.n	8040354 <__udivmoddi4+0x64>
 804033e:	eb1c 0303 	adds.w	r3, ip, r3
 8040342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8040346:	f080 811f 	bcs.w	8040588 <__udivmoddi4+0x298>
 804034a:	4299      	cmp	r1, r3
 804034c:	f240 811c 	bls.w	8040588 <__udivmoddi4+0x298>
 8040350:	3e02      	subs	r6, #2
 8040352:	4463      	add	r3, ip
 8040354:	1a5b      	subs	r3, r3, r1
 8040356:	b2a4      	uxth	r4, r4
 8040358:	fbb3 f0f8 	udiv	r0, r3, r8
 804035c:	fb08 3310 	mls	r3, r8, r0, r3
 8040360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040364:	fb00 f707 	mul.w	r7, r0, r7
 8040368:	42a7      	cmp	r7, r4
 804036a:	d90a      	bls.n	8040382 <__udivmoddi4+0x92>
 804036c:	eb1c 0404 	adds.w	r4, ip, r4
 8040370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8040374:	f080 810a 	bcs.w	804058c <__udivmoddi4+0x29c>
 8040378:	42a7      	cmp	r7, r4
 804037a:	f240 8107 	bls.w	804058c <__udivmoddi4+0x29c>
 804037e:	4464      	add	r4, ip
 8040380:	3802      	subs	r0, #2
 8040382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040386:	1be4      	subs	r4, r4, r7
 8040388:	2600      	movs	r6, #0
 804038a:	b11d      	cbz	r5, 8040394 <__udivmoddi4+0xa4>
 804038c:	40d4      	lsrs	r4, r2
 804038e:	2300      	movs	r3, #0
 8040390:	e9c5 4300 	strd	r4, r3, [r5]
 8040394:	4631      	mov	r1, r6
 8040396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804039a:	428b      	cmp	r3, r1
 804039c:	d909      	bls.n	80403b2 <__udivmoddi4+0xc2>
 804039e:	2d00      	cmp	r5, #0
 80403a0:	f000 80ef 	beq.w	8040582 <__udivmoddi4+0x292>
 80403a4:	2600      	movs	r6, #0
 80403a6:	e9c5 0100 	strd	r0, r1, [r5]
 80403aa:	4630      	mov	r0, r6
 80403ac:	4631      	mov	r1, r6
 80403ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403b2:	fab3 f683 	clz	r6, r3
 80403b6:	2e00      	cmp	r6, #0
 80403b8:	d14a      	bne.n	8040450 <__udivmoddi4+0x160>
 80403ba:	428b      	cmp	r3, r1
 80403bc:	d302      	bcc.n	80403c4 <__udivmoddi4+0xd4>
 80403be:	4282      	cmp	r2, r0
 80403c0:	f200 80f9 	bhi.w	80405b6 <__udivmoddi4+0x2c6>
 80403c4:	1a84      	subs	r4, r0, r2
 80403c6:	eb61 0303 	sbc.w	r3, r1, r3
 80403ca:	2001      	movs	r0, #1
 80403cc:	469e      	mov	lr, r3
 80403ce:	2d00      	cmp	r5, #0
 80403d0:	d0e0      	beq.n	8040394 <__udivmoddi4+0xa4>
 80403d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403d6:	e7dd      	b.n	8040394 <__udivmoddi4+0xa4>
 80403d8:	b902      	cbnz	r2, 80403dc <__udivmoddi4+0xec>
 80403da:	deff      	udf	#255	; 0xff
 80403dc:	fab2 f282 	clz	r2, r2
 80403e0:	2a00      	cmp	r2, #0
 80403e2:	f040 8092 	bne.w	804050a <__udivmoddi4+0x21a>
 80403e6:	eba1 010c 	sub.w	r1, r1, ip
 80403ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403ee:	fa1f fe8c 	uxth.w	lr, ip
 80403f2:	2601      	movs	r6, #1
 80403f4:	0c20      	lsrs	r0, r4, #16
 80403f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403fa:	fb07 1113 	mls	r1, r7, r3, r1
 80403fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040402:	fb0e f003 	mul.w	r0, lr, r3
 8040406:	4288      	cmp	r0, r1
 8040408:	d908      	bls.n	804041c <__udivmoddi4+0x12c>
 804040a:	eb1c 0101 	adds.w	r1, ip, r1
 804040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8040412:	d202      	bcs.n	804041a <__udivmoddi4+0x12a>
 8040414:	4288      	cmp	r0, r1
 8040416:	f200 80cb 	bhi.w	80405b0 <__udivmoddi4+0x2c0>
 804041a:	4643      	mov	r3, r8
 804041c:	1a09      	subs	r1, r1, r0
 804041e:	b2a4      	uxth	r4, r4
 8040420:	fbb1 f0f7 	udiv	r0, r1, r7
 8040424:	fb07 1110 	mls	r1, r7, r0, r1
 8040428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 804042c:	fb0e fe00 	mul.w	lr, lr, r0
 8040430:	45a6      	cmp	lr, r4
 8040432:	d908      	bls.n	8040446 <__udivmoddi4+0x156>
 8040434:	eb1c 0404 	adds.w	r4, ip, r4
 8040438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 804043c:	d202      	bcs.n	8040444 <__udivmoddi4+0x154>
 804043e:	45a6      	cmp	lr, r4
 8040440:	f200 80bb 	bhi.w	80405ba <__udivmoddi4+0x2ca>
 8040444:	4608      	mov	r0, r1
 8040446:	eba4 040e 	sub.w	r4, r4, lr
 804044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804044e:	e79c      	b.n	804038a <__udivmoddi4+0x9a>
 8040450:	f1c6 0720 	rsb	r7, r6, #32
 8040454:	40b3      	lsls	r3, r6
 8040456:	fa22 fc07 	lsr.w	ip, r2, r7
 804045a:	ea4c 0c03 	orr.w	ip, ip, r3
 804045e:	fa20 f407 	lsr.w	r4, r0, r7
 8040462:	fa01 f306 	lsl.w	r3, r1, r6
 8040466:	431c      	orrs	r4, r3
 8040468:	40f9      	lsrs	r1, r7
 804046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804046e:	fa00 f306 	lsl.w	r3, r0, r6
 8040472:	fbb1 f8f9 	udiv	r8, r1, r9
 8040476:	0c20      	lsrs	r0, r4, #16
 8040478:	fa1f fe8c 	uxth.w	lr, ip
 804047c:	fb09 1118 	mls	r1, r9, r8, r1
 8040480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040484:	fb08 f00e 	mul.w	r0, r8, lr
 8040488:	4288      	cmp	r0, r1
 804048a:	fa02 f206 	lsl.w	r2, r2, r6
 804048e:	d90b      	bls.n	80404a8 <__udivmoddi4+0x1b8>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8040498:	f080 8088 	bcs.w	80405ac <__udivmoddi4+0x2bc>
 804049c:	4288      	cmp	r0, r1
 804049e:	f240 8085 	bls.w	80405ac <__udivmoddi4+0x2bc>
 80404a2:	f1a8 0802 	sub.w	r8, r8, #2
 80404a6:	4461      	add	r1, ip
 80404a8:	1a09      	subs	r1, r1, r0
 80404aa:	b2a4      	uxth	r4, r4
 80404ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80404b0:	fb09 1110 	mls	r1, r9, r0, r1
 80404b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80404b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80404bc:	458e      	cmp	lr, r1
 80404be:	d908      	bls.n	80404d2 <__udivmoddi4+0x1e2>
 80404c0:	eb1c 0101 	adds.w	r1, ip, r1
 80404c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80404c8:	d26c      	bcs.n	80405a4 <__udivmoddi4+0x2b4>
 80404ca:	458e      	cmp	lr, r1
 80404cc:	d96a      	bls.n	80405a4 <__udivmoddi4+0x2b4>
 80404ce:	3802      	subs	r0, #2
 80404d0:	4461      	add	r1, ip
 80404d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404d6:	fba0 9402 	umull	r9, r4, r0, r2
 80404da:	eba1 010e 	sub.w	r1, r1, lr
 80404de:	42a1      	cmp	r1, r4
 80404e0:	46c8      	mov	r8, r9
 80404e2:	46a6      	mov	lr, r4
 80404e4:	d356      	bcc.n	8040594 <__udivmoddi4+0x2a4>
 80404e6:	d053      	beq.n	8040590 <__udivmoddi4+0x2a0>
 80404e8:	b15d      	cbz	r5, 8040502 <__udivmoddi4+0x212>
 80404ea:	ebb3 0208 	subs.w	r2, r3, r8
 80404ee:	eb61 010e 	sbc.w	r1, r1, lr
 80404f2:	fa01 f707 	lsl.w	r7, r1, r7
 80404f6:	fa22 f306 	lsr.w	r3, r2, r6
 80404fa:	40f1      	lsrs	r1, r6
 80404fc:	431f      	orrs	r7, r3
 80404fe:	e9c5 7100 	strd	r7, r1, [r5]
 8040502:	2600      	movs	r6, #0
 8040504:	4631      	mov	r1, r6
 8040506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804050a:	f1c2 0320 	rsb	r3, r2, #32
 804050e:	40d8      	lsrs	r0, r3
 8040510:	fa0c fc02 	lsl.w	ip, ip, r2
 8040514:	fa21 f303 	lsr.w	r3, r1, r3
 8040518:	4091      	lsls	r1, r2
 804051a:	4301      	orrs	r1, r0
 804051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040520:	fa1f fe8c 	uxth.w	lr, ip
 8040524:	fbb3 f0f7 	udiv	r0, r3, r7
 8040528:	fb07 3610 	mls	r6, r7, r0, r3
 804052c:	0c0b      	lsrs	r3, r1, #16
 804052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040532:	fb00 f60e 	mul.w	r6, r0, lr
 8040536:	429e      	cmp	r6, r3
 8040538:	fa04 f402 	lsl.w	r4, r4, r2
 804053c:	d908      	bls.n	8040550 <__udivmoddi4+0x260>
 804053e:	eb1c 0303 	adds.w	r3, ip, r3
 8040542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8040546:	d22f      	bcs.n	80405a8 <__udivmoddi4+0x2b8>
 8040548:	429e      	cmp	r6, r3
 804054a:	d92d      	bls.n	80405a8 <__udivmoddi4+0x2b8>
 804054c:	3802      	subs	r0, #2
 804054e:	4463      	add	r3, ip
 8040550:	1b9b      	subs	r3, r3, r6
 8040552:	b289      	uxth	r1, r1
 8040554:	fbb3 f6f7 	udiv	r6, r3, r7
 8040558:	fb07 3316 	mls	r3, r7, r6, r3
 804055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040560:	fb06 f30e 	mul.w	r3, r6, lr
 8040564:	428b      	cmp	r3, r1
 8040566:	d908      	bls.n	804057a <__udivmoddi4+0x28a>
 8040568:	eb1c 0101 	adds.w	r1, ip, r1
 804056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8040570:	d216      	bcs.n	80405a0 <__udivmoddi4+0x2b0>
 8040572:	428b      	cmp	r3, r1
 8040574:	d914      	bls.n	80405a0 <__udivmoddi4+0x2b0>
 8040576:	3e02      	subs	r6, #2
 8040578:	4461      	add	r1, ip
 804057a:	1ac9      	subs	r1, r1, r3
 804057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040580:	e738      	b.n	80403f4 <__udivmoddi4+0x104>
 8040582:	462e      	mov	r6, r5
 8040584:	4628      	mov	r0, r5
 8040586:	e705      	b.n	8040394 <__udivmoddi4+0xa4>
 8040588:	4606      	mov	r6, r0
 804058a:	e6e3      	b.n	8040354 <__udivmoddi4+0x64>
 804058c:	4618      	mov	r0, r3
 804058e:	e6f8      	b.n	8040382 <__udivmoddi4+0x92>
 8040590:	454b      	cmp	r3, r9
 8040592:	d2a9      	bcs.n	80404e8 <__udivmoddi4+0x1f8>
 8040594:	ebb9 0802 	subs.w	r8, r9, r2
 8040598:	eb64 0e0c 	sbc.w	lr, r4, ip
 804059c:	3801      	subs	r0, #1
 804059e:	e7a3      	b.n	80404e8 <__udivmoddi4+0x1f8>
 80405a0:	4646      	mov	r6, r8
 80405a2:	e7ea      	b.n	804057a <__udivmoddi4+0x28a>
 80405a4:	4620      	mov	r0, r4
 80405a6:	e794      	b.n	80404d2 <__udivmoddi4+0x1e2>
 80405a8:	4640      	mov	r0, r8
 80405aa:	e7d1      	b.n	8040550 <__udivmoddi4+0x260>
 80405ac:	46d0      	mov	r8, sl
 80405ae:	e77b      	b.n	80404a8 <__udivmoddi4+0x1b8>
 80405b0:	3b02      	subs	r3, #2
 80405b2:	4461      	add	r1, ip
 80405b4:	e732      	b.n	804041c <__udivmoddi4+0x12c>
 80405b6:	4630      	mov	r0, r6
 80405b8:	e709      	b.n	80403ce <__udivmoddi4+0xde>
 80405ba:	4464      	add	r4, ip
 80405bc:	3802      	subs	r0, #2
 80405be:	e742      	b.n	8040446 <__udivmoddi4+0x156>

080405c0 <__aeabi_idiv0>:
 80405c0:	4770      	bx	lr
 80405c2:	bf00      	nop

080405c4 <printd>:
static void MX_USART2_UART_Init(void);

/* USER CODE BEGIN PFP */

void printd(char *pMsg)
{
 80405c4:	b580      	push	{r7, lr}
 80405c6:	b082      	sub	sp, #8
 80405c8:	af00      	add	r7, sp, #0
 80405ca:	6078      	str	r0, [r7, #4]
	//strcat(pMsg, "\r\n");
	HAL_UART_Transmit(&huart2, pMsg, strlen(pMsg), 0xFFFF);
 80405cc:	6878      	ldr	r0, [r7, #4]
 80405ce:	f7ff fe1f 	bl	8040210 <strlen>
 80405d2:	4603      	mov	r3, r0
 80405d4:	b29a      	uxth	r2, r3
 80405d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80405da:	6879      	ldr	r1, [r7, #4]
 80405dc:	4803      	ldr	r0, [pc, #12]	; (80405ec <printd+0x28>)
 80405de:	f001 f9f0 	bl	80419c2 <HAL_UART_Transmit>
}
 80405e2:	bf00      	nop
 80405e4:	3708      	adds	r7, #8
 80405e6:	46bd      	mov	sp, r7
 80405e8:	bd80      	pop	{r7, pc}
 80405ea:	bf00      	nop
 80405ec:	2000008c 	.word	0x2000008c

080405f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80405f0:	b580      	push	{r7, lr}
 80405f2:	b090      	sub	sp, #64	; 0x40
 80405f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80405f6:	f000 fa09 	bl	8040a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80405fa:	f000 f827 	bl	804064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405fe:	f000 f8ad 	bl	804075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8040602:	f000 f881 	bl	8040708 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(txt, "\bStarting Application (v%d.%d)\n", App_Version[0], App_Version[1]);
 8040606:	2300      	movs	r3, #0
 8040608:	461a      	mov	r2, r3
 804060a:	2303      	movs	r3, #3
 804060c:	4638      	mov	r0, r7
 804060e:	490d      	ldr	r1, [pc, #52]	; (8040644 <main+0x54>)
 8040610:	f001 fd7e 	bl	8042110 <siprintf>
  printd(txt);
 8040614:	463b      	mov	r3, r7
 8040616:	4618      	mov	r0, r3
 8040618:	f7ff ffd4 	bl	80405c4 <printd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);			/* Blue led is ON	*/
 804061c:	2200      	movs	r2, #0
 804061e:	2108      	movs	r1, #8
 8040620:	4809      	ldr	r0, [pc, #36]	; (8040648 <main+0x58>)
 8040622:	f000 fd03 	bl	804102c <HAL_GPIO_WritePin>
	HAL_Delay(1000);											/* Delay 1 second	*/
 8040626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804062a:	f000 fa61 	bl	8040af0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);		/* Blue led is OFF	*/
 804062e:	2201      	movs	r2, #1
 8040630:	2108      	movs	r1, #8
 8040632:	4805      	ldr	r0, [pc, #20]	; (8040648 <main+0x58>)
 8040634:	f000 fcfa 	bl	804102c <HAL_GPIO_WritePin>
	HAL_Delay(1000);											/* Delay 1 second	*/
 8040638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804063c:	f000 fa58 	bl	8040af0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);			/* Blue led is ON	*/
 8040640:	e7ec      	b.n	804061c <main+0x2c>
 8040642:	bf00      	nop
 8040644:	08042a08 	.word	0x08042a08
 8040648:	40021000 	.word	0x40021000

0804064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 804064c:	b580      	push	{r7, lr}
 804064e:	b094      	sub	sp, #80	; 0x50
 8040650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040652:	f107 031c 	add.w	r3, r7, #28
 8040656:	2234      	movs	r2, #52	; 0x34
 8040658:	2100      	movs	r1, #0
 804065a:	4618      	mov	r0, r3
 804065c:	f001 fd50 	bl	8042100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040660:	f107 0308 	add.w	r3, r7, #8
 8040664:	2200      	movs	r2, #0
 8040666:	601a      	str	r2, [r3, #0]
 8040668:	605a      	str	r2, [r3, #4]
 804066a:	609a      	str	r2, [r3, #8]
 804066c:	60da      	str	r2, [r3, #12]
 804066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040670:	2300      	movs	r3, #0
 8040672:	607b      	str	r3, [r7, #4]
 8040674:	4b22      	ldr	r3, [pc, #136]	; (8040700 <SystemClock_Config+0xb4>)
 8040676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040678:	4a21      	ldr	r2, [pc, #132]	; (8040700 <SystemClock_Config+0xb4>)
 804067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804067e:	6413      	str	r3, [r2, #64]	; 0x40
 8040680:	4b1f      	ldr	r3, [pc, #124]	; (8040700 <SystemClock_Config+0xb4>)
 8040682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040688:	607b      	str	r3, [r7, #4]
 804068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804068c:	2300      	movs	r3, #0
 804068e:	603b      	str	r3, [r7, #0]
 8040690:	4b1c      	ldr	r3, [pc, #112]	; (8040704 <SystemClock_Config+0xb8>)
 8040692:	681b      	ldr	r3, [r3, #0]
 8040694:	4a1b      	ldr	r2, [pc, #108]	; (8040704 <SystemClock_Config+0xb8>)
 8040696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 804069a:	6013      	str	r3, [r2, #0]
 804069c:	4b19      	ldr	r3, [pc, #100]	; (8040704 <SystemClock_Config+0xb8>)
 804069e:	681b      	ldr	r3, [r3, #0]
 80406a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80406a4:	603b      	str	r3, [r7, #0]
 80406a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80406a8:	2302      	movs	r3, #2
 80406aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80406ac:	2301      	movs	r3, #1
 80406ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80406b0:	2310      	movs	r3, #16
 80406b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80406b4:	2300      	movs	r3, #0
 80406b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80406b8:	f107 031c 	add.w	r3, r7, #28
 80406bc:	4618      	mov	r0, r3
 80406be:	f000 feaf 	bl	8041420 <HAL_RCC_OscConfig>
 80406c2:	4603      	mov	r3, r0
 80406c4:	2b00      	cmp	r3, #0
 80406c6:	d001      	beq.n	80406cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80406c8:	f000 f88a 	bl	80407e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80406cc:	230f      	movs	r3, #15
 80406ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80406d0:	2300      	movs	r3, #0
 80406d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80406d4:	2300      	movs	r3, #0
 80406d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80406d8:	2300      	movs	r3, #0
 80406da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80406dc:	2300      	movs	r3, #0
 80406de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80406e0:	f107 0308 	add.w	r3, r7, #8
 80406e4:	2100      	movs	r1, #0
 80406e6:	4618      	mov	r0, r3
 80406e8:	f000 fcba 	bl	8041060 <HAL_RCC_ClockConfig>
 80406ec:	4603      	mov	r3, r0
 80406ee:	2b00      	cmp	r3, #0
 80406f0:	d001      	beq.n	80406f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80406f2:	f000 f875 	bl	80407e0 <Error_Handler>
  }
}
 80406f6:	bf00      	nop
 80406f8:	3750      	adds	r7, #80	; 0x50
 80406fa:	46bd      	mov	sp, r7
 80406fc:	bd80      	pop	{r7, pc}
 80406fe:	bf00      	nop
 8040700:	40023800 	.word	0x40023800
 8040704:	40007000 	.word	0x40007000

08040708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8040708:	b580      	push	{r7, lr}
 804070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 804070c:	4b11      	ldr	r3, [pc, #68]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 804070e:	4a12      	ldr	r2, [pc, #72]	; (8040758 <MX_USART2_UART_Init+0x50>)
 8040710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8040712:	4b10      	ldr	r3, [pc, #64]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 8040714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 804071a:	4b0e      	ldr	r3, [pc, #56]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 804071c:	2200      	movs	r2, #0
 804071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8040720:	4b0c      	ldr	r3, [pc, #48]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 8040722:	2200      	movs	r2, #0
 8040724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8040726:	4b0b      	ldr	r3, [pc, #44]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 8040728:	2200      	movs	r2, #0
 804072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 804072c:	4b09      	ldr	r3, [pc, #36]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 804072e:	220c      	movs	r2, #12
 8040730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040732:	4b08      	ldr	r3, [pc, #32]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 8040734:	2200      	movs	r2, #0
 8040736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8040738:	4b06      	ldr	r3, [pc, #24]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 804073a:	2200      	movs	r2, #0
 804073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 804073e:	4805      	ldr	r0, [pc, #20]	; (8040754 <MX_USART2_UART_Init+0x4c>)
 8040740:	f001 f8f2 	bl	8041928 <HAL_UART_Init>
 8040744:	4603      	mov	r3, r0
 8040746:	2b00      	cmp	r3, #0
 8040748:	d001      	beq.n	804074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 804074a:	f000 f849 	bl	80407e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 804074e:	bf00      	nop
 8040750:	bd80      	pop	{r7, pc}
 8040752:	bf00      	nop
 8040754:	2000008c 	.word	0x2000008c
 8040758:	40004400 	.word	0x40004400

0804075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 804075c:	b580      	push	{r7, lr}
 804075e:	b088      	sub	sp, #32
 8040760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040762:	f107 030c 	add.w	r3, r7, #12
 8040766:	2200      	movs	r2, #0
 8040768:	601a      	str	r2, [r3, #0]
 804076a:	605a      	str	r2, [r3, #4]
 804076c:	609a      	str	r2, [r3, #8]
 804076e:	60da      	str	r2, [r3, #12]
 8040770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040772:	2300      	movs	r3, #0
 8040774:	60bb      	str	r3, [r7, #8]
 8040776:	4b18      	ldr	r3, [pc, #96]	; (80407d8 <MX_GPIO_Init+0x7c>)
 8040778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804077a:	4a17      	ldr	r2, [pc, #92]	; (80407d8 <MX_GPIO_Init+0x7c>)
 804077c:	f043 0310 	orr.w	r3, r3, #16
 8040780:	6313      	str	r3, [r2, #48]	; 0x30
 8040782:	4b15      	ldr	r3, [pc, #84]	; (80407d8 <MX_GPIO_Init+0x7c>)
 8040784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040786:	f003 0310 	and.w	r3, r3, #16
 804078a:	60bb      	str	r3, [r7, #8]
 804078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804078e:	2300      	movs	r3, #0
 8040790:	607b      	str	r3, [r7, #4]
 8040792:	4b11      	ldr	r3, [pc, #68]	; (80407d8 <MX_GPIO_Init+0x7c>)
 8040794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040796:	4a10      	ldr	r2, [pc, #64]	; (80407d8 <MX_GPIO_Init+0x7c>)
 8040798:	f043 0301 	orr.w	r3, r3, #1
 804079c:	6313      	str	r3, [r2, #48]	; 0x30
 804079e:	4b0e      	ldr	r3, [pc, #56]	; (80407d8 <MX_GPIO_Init+0x7c>)
 80407a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407a2:	f003 0301 	and.w	r3, r3, #1
 80407a6:	607b      	str	r3, [r7, #4]
 80407a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80407aa:	2200      	movs	r2, #0
 80407ac:	2108      	movs	r1, #8
 80407ae:	480b      	ldr	r0, [pc, #44]	; (80407dc <MX_GPIO_Init+0x80>)
 80407b0:	f000 fc3c 	bl	804102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80407b4:	2308      	movs	r3, #8
 80407b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407b8:	2301      	movs	r3, #1
 80407ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407bc:	2300      	movs	r3, #0
 80407be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407c0:	2300      	movs	r3, #0
 80407c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80407c4:	f107 030c 	add.w	r3, r7, #12
 80407c8:	4619      	mov	r1, r3
 80407ca:	4804      	ldr	r0, [pc, #16]	; (80407dc <MX_GPIO_Init+0x80>)
 80407cc:	f000 fa9a 	bl	8040d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80407d0:	bf00      	nop
 80407d2:	3720      	adds	r7, #32
 80407d4:	46bd      	mov	sp, r7
 80407d6:	bd80      	pop	{r7, pc}
 80407d8:	40023800 	.word	0x40023800
 80407dc:	40021000 	.word	0x40021000

080407e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80407e0:	b480      	push	{r7}
 80407e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80407e4:	b672      	cpsid	i
}
 80407e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80407e8:	e7fe      	b.n	80407e8 <Error_Handler+0x8>
	...

080407ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80407ec:	b480      	push	{r7}
 80407ee:	b083      	sub	sp, #12
 80407f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80407f2:	2300      	movs	r3, #0
 80407f4:	607b      	str	r3, [r7, #4]
 80407f6:	4b10      	ldr	r3, [pc, #64]	; (8040838 <HAL_MspInit+0x4c>)
 80407f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80407fa:	4a0f      	ldr	r2, [pc, #60]	; (8040838 <HAL_MspInit+0x4c>)
 80407fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040800:	6453      	str	r3, [r2, #68]	; 0x44
 8040802:	4b0d      	ldr	r3, [pc, #52]	; (8040838 <HAL_MspInit+0x4c>)
 8040804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804080a:	607b      	str	r3, [r7, #4]
 804080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804080e:	2300      	movs	r3, #0
 8040810:	603b      	str	r3, [r7, #0]
 8040812:	4b09      	ldr	r3, [pc, #36]	; (8040838 <HAL_MspInit+0x4c>)
 8040814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040816:	4a08      	ldr	r2, [pc, #32]	; (8040838 <HAL_MspInit+0x4c>)
 8040818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804081c:	6413      	str	r3, [r2, #64]	; 0x40
 804081e:	4b06      	ldr	r3, [pc, #24]	; (8040838 <HAL_MspInit+0x4c>)
 8040820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040826:	603b      	str	r3, [r7, #0]
 8040828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804082a:	bf00      	nop
 804082c:	370c      	adds	r7, #12
 804082e:	46bd      	mov	sp, r7
 8040830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040834:	4770      	bx	lr
 8040836:	bf00      	nop
 8040838:	40023800 	.word	0x40023800

0804083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 804083c:	b580      	push	{r7, lr}
 804083e:	b08a      	sub	sp, #40	; 0x28
 8040840:	af00      	add	r7, sp, #0
 8040842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040844:	f107 0314 	add.w	r3, r7, #20
 8040848:	2200      	movs	r2, #0
 804084a:	601a      	str	r2, [r3, #0]
 804084c:	605a      	str	r2, [r3, #4]
 804084e:	609a      	str	r2, [r3, #8]
 8040850:	60da      	str	r2, [r3, #12]
 8040852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8040854:	687b      	ldr	r3, [r7, #4]
 8040856:	681b      	ldr	r3, [r3, #0]
 8040858:	4a19      	ldr	r2, [pc, #100]	; (80408c0 <HAL_UART_MspInit+0x84>)
 804085a:	4293      	cmp	r3, r2
 804085c:	d12b      	bne.n	80408b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 804085e:	2300      	movs	r3, #0
 8040860:	613b      	str	r3, [r7, #16]
 8040862:	4b18      	ldr	r3, [pc, #96]	; (80408c4 <HAL_UART_MspInit+0x88>)
 8040864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040866:	4a17      	ldr	r2, [pc, #92]	; (80408c4 <HAL_UART_MspInit+0x88>)
 8040868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804086c:	6413      	str	r3, [r2, #64]	; 0x40
 804086e:	4b15      	ldr	r3, [pc, #84]	; (80408c4 <HAL_UART_MspInit+0x88>)
 8040870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040876:	613b      	str	r3, [r7, #16]
 8040878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804087a:	2300      	movs	r3, #0
 804087c:	60fb      	str	r3, [r7, #12]
 804087e:	4b11      	ldr	r3, [pc, #68]	; (80408c4 <HAL_UART_MspInit+0x88>)
 8040880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040882:	4a10      	ldr	r2, [pc, #64]	; (80408c4 <HAL_UART_MspInit+0x88>)
 8040884:	f043 0301 	orr.w	r3, r3, #1
 8040888:	6313      	str	r3, [r2, #48]	; 0x30
 804088a:	4b0e      	ldr	r3, [pc, #56]	; (80408c4 <HAL_UART_MspInit+0x88>)
 804088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804088e:	f003 0301 	and.w	r3, r3, #1
 8040892:	60fb      	str	r3, [r7, #12]
 8040894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8040896:	230c      	movs	r3, #12
 8040898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804089a:	2302      	movs	r3, #2
 804089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804089e:	2300      	movs	r3, #0
 80408a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80408a2:	2303      	movs	r3, #3
 80408a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80408a6:	2307      	movs	r3, #7
 80408a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80408aa:	f107 0314 	add.w	r3, r7, #20
 80408ae:	4619      	mov	r1, r3
 80408b0:	4805      	ldr	r0, [pc, #20]	; (80408c8 <HAL_UART_MspInit+0x8c>)
 80408b2:	f000 fa27 	bl	8040d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80408b6:	bf00      	nop
 80408b8:	3728      	adds	r7, #40	; 0x28
 80408ba:	46bd      	mov	sp, r7
 80408bc:	bd80      	pop	{r7, pc}
 80408be:	bf00      	nop
 80408c0:	40004400 	.word	0x40004400
 80408c4:	40023800 	.word	0x40023800
 80408c8:	40020000 	.word	0x40020000

080408cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80408cc:	b480      	push	{r7}
 80408ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80408d0:	e7fe      	b.n	80408d0 <NMI_Handler+0x4>

080408d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80408d2:	b480      	push	{r7}
 80408d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80408d6:	e7fe      	b.n	80408d6 <HardFault_Handler+0x4>

080408d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80408d8:	b480      	push	{r7}
 80408da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80408dc:	e7fe      	b.n	80408dc <MemManage_Handler+0x4>

080408de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80408de:	b480      	push	{r7}
 80408e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80408e2:	e7fe      	b.n	80408e2 <BusFault_Handler+0x4>

080408e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80408e4:	b480      	push	{r7}
 80408e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80408e8:	e7fe      	b.n	80408e8 <UsageFault_Handler+0x4>

080408ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80408ea:	b480      	push	{r7}
 80408ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80408ee:	bf00      	nop
 80408f0:	46bd      	mov	sp, r7
 80408f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408f6:	4770      	bx	lr

080408f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80408f8:	b480      	push	{r7}
 80408fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80408fc:	bf00      	nop
 80408fe:	46bd      	mov	sp, r7
 8040900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040904:	4770      	bx	lr

08040906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040906:	b480      	push	{r7}
 8040908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804090a:	bf00      	nop
 804090c:	46bd      	mov	sp, r7
 804090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040912:	4770      	bx	lr

08040914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040914:	b580      	push	{r7, lr}
 8040916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040918:	f000 f8ca 	bl	8040ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804091c:	bf00      	nop
 804091e:	bd80      	pop	{r7, pc}

08040920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040920:	b580      	push	{r7, lr}
 8040922:	b086      	sub	sp, #24
 8040924:	af00      	add	r7, sp, #0
 8040926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040928:	4a14      	ldr	r2, [pc, #80]	; (804097c <_sbrk+0x5c>)
 804092a:	4b15      	ldr	r3, [pc, #84]	; (8040980 <_sbrk+0x60>)
 804092c:	1ad3      	subs	r3, r2, r3
 804092e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040930:	697b      	ldr	r3, [r7, #20]
 8040932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040934:	4b13      	ldr	r3, [pc, #76]	; (8040984 <_sbrk+0x64>)
 8040936:	681b      	ldr	r3, [r3, #0]
 8040938:	2b00      	cmp	r3, #0
 804093a:	d102      	bne.n	8040942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 804093c:	4b11      	ldr	r3, [pc, #68]	; (8040984 <_sbrk+0x64>)
 804093e:	4a12      	ldr	r2, [pc, #72]	; (8040988 <_sbrk+0x68>)
 8040940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040942:	4b10      	ldr	r3, [pc, #64]	; (8040984 <_sbrk+0x64>)
 8040944:	681a      	ldr	r2, [r3, #0]
 8040946:	687b      	ldr	r3, [r7, #4]
 8040948:	4413      	add	r3, r2
 804094a:	693a      	ldr	r2, [r7, #16]
 804094c:	429a      	cmp	r2, r3
 804094e:	d207      	bcs.n	8040960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040950:	f001 fbac 	bl	80420ac <__errno>
 8040954:	4603      	mov	r3, r0
 8040956:	220c      	movs	r2, #12
 8040958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 804095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804095e:	e009      	b.n	8040974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040960:	4b08      	ldr	r3, [pc, #32]	; (8040984 <_sbrk+0x64>)
 8040962:	681b      	ldr	r3, [r3, #0]
 8040964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040966:	4b07      	ldr	r3, [pc, #28]	; (8040984 <_sbrk+0x64>)
 8040968:	681a      	ldr	r2, [r3, #0]
 804096a:	687b      	ldr	r3, [r7, #4]
 804096c:	4413      	add	r3, r2
 804096e:	4a05      	ldr	r2, [pc, #20]	; (8040984 <_sbrk+0x64>)
 8040970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040972:	68fb      	ldr	r3, [r7, #12]
}
 8040974:	4618      	mov	r0, r3
 8040976:	3718      	adds	r7, #24
 8040978:	46bd      	mov	sp, r7
 804097a:	bd80      	pop	{r7, pc}
 804097c:	20040000 	.word	0x20040000
 8040980:	00000400 	.word	0x00000400
 8040984:	200000d0 	.word	0x200000d0
 8040988:	200000e8 	.word	0x200000e8

0804098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 804098c:	b480      	push	{r7}
 804098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040990:	4b07      	ldr	r3, [pc, #28]	; (80409b0 <SystemInit+0x24>)
 8040992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040996:	4a06      	ldr	r2, [pc, #24]	; (80409b0 <SystemInit+0x24>)
 8040998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80409a0:	4b03      	ldr	r3, [pc, #12]	; (80409b0 <SystemInit+0x24>)
 80409a2:	4a04      	ldr	r2, [pc, #16]	; (80409b4 <SystemInit+0x28>)
 80409a4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80409a6:	bf00      	nop
 80409a8:	46bd      	mov	sp, r7
 80409aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409ae:	4770      	bx	lr
 80409b0:	e000ed00 	.word	0xe000ed00
 80409b4:	08040000 	.word	0x08040000

080409b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80409b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80409f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80409bc:	480d      	ldr	r0, [pc, #52]	; (80409f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80409be:	490e      	ldr	r1, [pc, #56]	; (80409f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80409c0:	4a0e      	ldr	r2, [pc, #56]	; (80409fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80409c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80409c4:	e002      	b.n	80409cc <LoopCopyDataInit>

080409c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80409c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80409c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80409ca:	3304      	adds	r3, #4

080409cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80409cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80409ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80409d0:	d3f9      	bcc.n	80409c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80409d2:	4a0b      	ldr	r2, [pc, #44]	; (8040a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80409d4:	4c0b      	ldr	r4, [pc, #44]	; (8040a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80409d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80409d8:	e001      	b.n	80409de <LoopFillZerobss>

080409da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80409da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80409dc:	3204      	adds	r2, #4

080409de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80409de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80409e0:	d3fb      	bcc.n	80409da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80409e2:	f7ff ffd3 	bl	804098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80409e6:	f001 fb67 	bl	80420b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80409ea:	f7ff fe01 	bl	80405f0 <main>
  bx  lr    
 80409ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80409f0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80409f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80409f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80409fc:	08042a84 	.word	0x08042a84
  ldr r2, =_sbss
 8040a00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8040a04:	200000e8 	.word	0x200000e8

08040a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040a08:	e7fe      	b.n	8040a08 <ADC_IRQHandler>
	...

08040a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040a0c:	b580      	push	{r7, lr}
 8040a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8040a10:	4b0e      	ldr	r3, [pc, #56]	; (8040a4c <HAL_Init+0x40>)
 8040a12:	681b      	ldr	r3, [r3, #0]
 8040a14:	4a0d      	ldr	r2, [pc, #52]	; (8040a4c <HAL_Init+0x40>)
 8040a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8040a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8040a1c:	4b0b      	ldr	r3, [pc, #44]	; (8040a4c <HAL_Init+0x40>)
 8040a1e:	681b      	ldr	r3, [r3, #0]
 8040a20:	4a0a      	ldr	r2, [pc, #40]	; (8040a4c <HAL_Init+0x40>)
 8040a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8040a28:	4b08      	ldr	r3, [pc, #32]	; (8040a4c <HAL_Init+0x40>)
 8040a2a:	681b      	ldr	r3, [r3, #0]
 8040a2c:	4a07      	ldr	r2, [pc, #28]	; (8040a4c <HAL_Init+0x40>)
 8040a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040a34:	2003      	movs	r0, #3
 8040a36:	f000 f931 	bl	8040c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040a3a:	200f      	movs	r0, #15
 8040a3c:	f000 f808 	bl	8040a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040a40:	f7ff fed4 	bl	80407ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040a44:	2300      	movs	r3, #0
}
 8040a46:	4618      	mov	r0, r3
 8040a48:	bd80      	pop	{r7, pc}
 8040a4a:	bf00      	nop
 8040a4c:	40023c00 	.word	0x40023c00

08040a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040a50:	b580      	push	{r7, lr}
 8040a52:	b082      	sub	sp, #8
 8040a54:	af00      	add	r7, sp, #0
 8040a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040a58:	4b12      	ldr	r3, [pc, #72]	; (8040aa4 <HAL_InitTick+0x54>)
 8040a5a:	681a      	ldr	r2, [r3, #0]
 8040a5c:	4b12      	ldr	r3, [pc, #72]	; (8040aa8 <HAL_InitTick+0x58>)
 8040a5e:	781b      	ldrb	r3, [r3, #0]
 8040a60:	4619      	mov	r1, r3
 8040a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8040a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8040a6e:	4618      	mov	r0, r3
 8040a70:	f000 f93b 	bl	8040cea <HAL_SYSTICK_Config>
 8040a74:	4603      	mov	r3, r0
 8040a76:	2b00      	cmp	r3, #0
 8040a78:	d001      	beq.n	8040a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040a7a:	2301      	movs	r3, #1
 8040a7c:	e00e      	b.n	8040a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040a7e:	687b      	ldr	r3, [r7, #4]
 8040a80:	2b0f      	cmp	r3, #15
 8040a82:	d80a      	bhi.n	8040a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040a84:	2200      	movs	r2, #0
 8040a86:	6879      	ldr	r1, [r7, #4]
 8040a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040a8c:	f000 f911 	bl	8040cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040a90:	4a06      	ldr	r2, [pc, #24]	; (8040aac <HAL_InitTick+0x5c>)
 8040a92:	687b      	ldr	r3, [r7, #4]
 8040a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040a96:	2300      	movs	r3, #0
 8040a98:	e000      	b.n	8040a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040a9a:	2301      	movs	r3, #1
}
 8040a9c:	4618      	mov	r0, r3
 8040a9e:	3708      	adds	r7, #8
 8040aa0:	46bd      	mov	sp, r7
 8040aa2:	bd80      	pop	{r7, pc}
 8040aa4:	20000000 	.word	0x20000000
 8040aa8:	20000008 	.word	0x20000008
 8040aac:	20000004 	.word	0x20000004

08040ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040ab0:	b480      	push	{r7}
 8040ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040ab4:	4b06      	ldr	r3, [pc, #24]	; (8040ad0 <HAL_IncTick+0x20>)
 8040ab6:	781b      	ldrb	r3, [r3, #0]
 8040ab8:	461a      	mov	r2, r3
 8040aba:	4b06      	ldr	r3, [pc, #24]	; (8040ad4 <HAL_IncTick+0x24>)
 8040abc:	681b      	ldr	r3, [r3, #0]
 8040abe:	4413      	add	r3, r2
 8040ac0:	4a04      	ldr	r2, [pc, #16]	; (8040ad4 <HAL_IncTick+0x24>)
 8040ac2:	6013      	str	r3, [r2, #0]
}
 8040ac4:	bf00      	nop
 8040ac6:	46bd      	mov	sp, r7
 8040ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040acc:	4770      	bx	lr
 8040ace:	bf00      	nop
 8040ad0:	20000008 	.word	0x20000008
 8040ad4:	200000d4 	.word	0x200000d4

08040ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040ad8:	b480      	push	{r7}
 8040ada:	af00      	add	r7, sp, #0
  return uwTick;
 8040adc:	4b03      	ldr	r3, [pc, #12]	; (8040aec <HAL_GetTick+0x14>)
 8040ade:	681b      	ldr	r3, [r3, #0]
}
 8040ae0:	4618      	mov	r0, r3
 8040ae2:	46bd      	mov	sp, r7
 8040ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ae8:	4770      	bx	lr
 8040aea:	bf00      	nop
 8040aec:	200000d4 	.word	0x200000d4

08040af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040af0:	b580      	push	{r7, lr}
 8040af2:	b084      	sub	sp, #16
 8040af4:	af00      	add	r7, sp, #0
 8040af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040af8:	f7ff ffee 	bl	8040ad8 <HAL_GetTick>
 8040afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040afe:	687b      	ldr	r3, [r7, #4]
 8040b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040b02:	68fb      	ldr	r3, [r7, #12]
 8040b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8040b08:	d005      	beq.n	8040b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040b0a:	4b0a      	ldr	r3, [pc, #40]	; (8040b34 <HAL_Delay+0x44>)
 8040b0c:	781b      	ldrb	r3, [r3, #0]
 8040b0e:	461a      	mov	r2, r3
 8040b10:	68fb      	ldr	r3, [r7, #12]
 8040b12:	4413      	add	r3, r2
 8040b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8040b16:	bf00      	nop
 8040b18:	f7ff ffde 	bl	8040ad8 <HAL_GetTick>
 8040b1c:	4602      	mov	r2, r0
 8040b1e:	68bb      	ldr	r3, [r7, #8]
 8040b20:	1ad3      	subs	r3, r2, r3
 8040b22:	68fa      	ldr	r2, [r7, #12]
 8040b24:	429a      	cmp	r2, r3
 8040b26:	d8f7      	bhi.n	8040b18 <HAL_Delay+0x28>
  {
  }
}
 8040b28:	bf00      	nop
 8040b2a:	bf00      	nop
 8040b2c:	3710      	adds	r7, #16
 8040b2e:	46bd      	mov	sp, r7
 8040b30:	bd80      	pop	{r7, pc}
 8040b32:	bf00      	nop
 8040b34:	20000008 	.word	0x20000008

08040b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040b38:	b480      	push	{r7}
 8040b3a:	b085      	sub	sp, #20
 8040b3c:	af00      	add	r7, sp, #0
 8040b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040b40:	687b      	ldr	r3, [r7, #4]
 8040b42:	f003 0307 	and.w	r3, r3, #7
 8040b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040b48:	4b0c      	ldr	r3, [pc, #48]	; (8040b7c <__NVIC_SetPriorityGrouping+0x44>)
 8040b4a:	68db      	ldr	r3, [r3, #12]
 8040b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040b4e:	68ba      	ldr	r2, [r7, #8]
 8040b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040b54:	4013      	ands	r3, r2
 8040b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040b58:	68fb      	ldr	r3, [r7, #12]
 8040b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040b5c:	68bb      	ldr	r3, [r7, #8]
 8040b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040b6a:	4a04      	ldr	r2, [pc, #16]	; (8040b7c <__NVIC_SetPriorityGrouping+0x44>)
 8040b6c:	68bb      	ldr	r3, [r7, #8]
 8040b6e:	60d3      	str	r3, [r2, #12]
}
 8040b70:	bf00      	nop
 8040b72:	3714      	adds	r7, #20
 8040b74:	46bd      	mov	sp, r7
 8040b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b7a:	4770      	bx	lr
 8040b7c:	e000ed00 	.word	0xe000ed00

08040b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040b80:	b480      	push	{r7}
 8040b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040b84:	4b04      	ldr	r3, [pc, #16]	; (8040b98 <__NVIC_GetPriorityGrouping+0x18>)
 8040b86:	68db      	ldr	r3, [r3, #12]
 8040b88:	0a1b      	lsrs	r3, r3, #8
 8040b8a:	f003 0307 	and.w	r3, r3, #7
}
 8040b8e:	4618      	mov	r0, r3
 8040b90:	46bd      	mov	sp, r7
 8040b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b96:	4770      	bx	lr
 8040b98:	e000ed00 	.word	0xe000ed00

08040b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040b9c:	b480      	push	{r7}
 8040b9e:	b083      	sub	sp, #12
 8040ba0:	af00      	add	r7, sp, #0
 8040ba2:	4603      	mov	r3, r0
 8040ba4:	6039      	str	r1, [r7, #0]
 8040ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040bac:	2b00      	cmp	r3, #0
 8040bae:	db0a      	blt.n	8040bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040bb0:	683b      	ldr	r3, [r7, #0]
 8040bb2:	b2da      	uxtb	r2, r3
 8040bb4:	490c      	ldr	r1, [pc, #48]	; (8040be8 <__NVIC_SetPriority+0x4c>)
 8040bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040bba:	0112      	lsls	r2, r2, #4
 8040bbc:	b2d2      	uxtb	r2, r2
 8040bbe:	440b      	add	r3, r1
 8040bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040bc4:	e00a      	b.n	8040bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040bc6:	683b      	ldr	r3, [r7, #0]
 8040bc8:	b2da      	uxtb	r2, r3
 8040bca:	4908      	ldr	r1, [pc, #32]	; (8040bec <__NVIC_SetPriority+0x50>)
 8040bcc:	79fb      	ldrb	r3, [r7, #7]
 8040bce:	f003 030f 	and.w	r3, r3, #15
 8040bd2:	3b04      	subs	r3, #4
 8040bd4:	0112      	lsls	r2, r2, #4
 8040bd6:	b2d2      	uxtb	r2, r2
 8040bd8:	440b      	add	r3, r1
 8040bda:	761a      	strb	r2, [r3, #24]
}
 8040bdc:	bf00      	nop
 8040bde:	370c      	adds	r7, #12
 8040be0:	46bd      	mov	sp, r7
 8040be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040be6:	4770      	bx	lr
 8040be8:	e000e100 	.word	0xe000e100
 8040bec:	e000ed00 	.word	0xe000ed00

08040bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040bf0:	b480      	push	{r7}
 8040bf2:	b089      	sub	sp, #36	; 0x24
 8040bf4:	af00      	add	r7, sp, #0
 8040bf6:	60f8      	str	r0, [r7, #12]
 8040bf8:	60b9      	str	r1, [r7, #8]
 8040bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040bfc:	68fb      	ldr	r3, [r7, #12]
 8040bfe:	f003 0307 	and.w	r3, r3, #7
 8040c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040c04:	69fb      	ldr	r3, [r7, #28]
 8040c06:	f1c3 0307 	rsb	r3, r3, #7
 8040c0a:	2b04      	cmp	r3, #4
 8040c0c:	bf28      	it	cs
 8040c0e:	2304      	movcs	r3, #4
 8040c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040c12:	69fb      	ldr	r3, [r7, #28]
 8040c14:	3304      	adds	r3, #4
 8040c16:	2b06      	cmp	r3, #6
 8040c18:	d902      	bls.n	8040c20 <NVIC_EncodePriority+0x30>
 8040c1a:	69fb      	ldr	r3, [r7, #28]
 8040c1c:	3b03      	subs	r3, #3
 8040c1e:	e000      	b.n	8040c22 <NVIC_EncodePriority+0x32>
 8040c20:	2300      	movs	r3, #0
 8040c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040c28:	69bb      	ldr	r3, [r7, #24]
 8040c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8040c2e:	43da      	mvns	r2, r3
 8040c30:	68bb      	ldr	r3, [r7, #8]
 8040c32:	401a      	ands	r2, r3
 8040c34:	697b      	ldr	r3, [r7, #20]
 8040c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8040c3c:	697b      	ldr	r3, [r7, #20]
 8040c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8040c42:	43d9      	mvns	r1, r3
 8040c44:	687b      	ldr	r3, [r7, #4]
 8040c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c48:	4313      	orrs	r3, r2
         );
}
 8040c4a:	4618      	mov	r0, r3
 8040c4c:	3724      	adds	r7, #36	; 0x24
 8040c4e:	46bd      	mov	sp, r7
 8040c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c54:	4770      	bx	lr
	...

08040c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040c58:	b580      	push	{r7, lr}
 8040c5a:	b082      	sub	sp, #8
 8040c5c:	af00      	add	r7, sp, #0
 8040c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040c60:	687b      	ldr	r3, [r7, #4]
 8040c62:	3b01      	subs	r3, #1
 8040c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040c68:	d301      	bcc.n	8040c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040c6a:	2301      	movs	r3, #1
 8040c6c:	e00f      	b.n	8040c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040c6e:	4a0a      	ldr	r2, [pc, #40]	; (8040c98 <SysTick_Config+0x40>)
 8040c70:	687b      	ldr	r3, [r7, #4]
 8040c72:	3b01      	subs	r3, #1
 8040c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040c76:	210f      	movs	r1, #15
 8040c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040c7c:	f7ff ff8e 	bl	8040b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040c80:	4b05      	ldr	r3, [pc, #20]	; (8040c98 <SysTick_Config+0x40>)
 8040c82:	2200      	movs	r2, #0
 8040c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040c86:	4b04      	ldr	r3, [pc, #16]	; (8040c98 <SysTick_Config+0x40>)
 8040c88:	2207      	movs	r2, #7
 8040c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040c8c:	2300      	movs	r3, #0
}
 8040c8e:	4618      	mov	r0, r3
 8040c90:	3708      	adds	r7, #8
 8040c92:	46bd      	mov	sp, r7
 8040c94:	bd80      	pop	{r7, pc}
 8040c96:	bf00      	nop
 8040c98:	e000e010 	.word	0xe000e010

08040c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c9c:	b580      	push	{r7, lr}
 8040c9e:	b082      	sub	sp, #8
 8040ca0:	af00      	add	r7, sp, #0
 8040ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040ca4:	6878      	ldr	r0, [r7, #4]
 8040ca6:	f7ff ff47 	bl	8040b38 <__NVIC_SetPriorityGrouping>
}
 8040caa:	bf00      	nop
 8040cac:	3708      	adds	r7, #8
 8040cae:	46bd      	mov	sp, r7
 8040cb0:	bd80      	pop	{r7, pc}

08040cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040cb2:	b580      	push	{r7, lr}
 8040cb4:	b086      	sub	sp, #24
 8040cb6:	af00      	add	r7, sp, #0
 8040cb8:	4603      	mov	r3, r0
 8040cba:	60b9      	str	r1, [r7, #8]
 8040cbc:	607a      	str	r2, [r7, #4]
 8040cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8040cc0:	2300      	movs	r3, #0
 8040cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040cc4:	f7ff ff5c 	bl	8040b80 <__NVIC_GetPriorityGrouping>
 8040cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040cca:	687a      	ldr	r2, [r7, #4]
 8040ccc:	68b9      	ldr	r1, [r7, #8]
 8040cce:	6978      	ldr	r0, [r7, #20]
 8040cd0:	f7ff ff8e 	bl	8040bf0 <NVIC_EncodePriority>
 8040cd4:	4602      	mov	r2, r0
 8040cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040cda:	4611      	mov	r1, r2
 8040cdc:	4618      	mov	r0, r3
 8040cde:	f7ff ff5d 	bl	8040b9c <__NVIC_SetPriority>
}
 8040ce2:	bf00      	nop
 8040ce4:	3718      	adds	r7, #24
 8040ce6:	46bd      	mov	sp, r7
 8040ce8:	bd80      	pop	{r7, pc}

08040cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040cea:	b580      	push	{r7, lr}
 8040cec:	b082      	sub	sp, #8
 8040cee:	af00      	add	r7, sp, #0
 8040cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040cf2:	6878      	ldr	r0, [r7, #4]
 8040cf4:	f7ff ffb0 	bl	8040c58 <SysTick_Config>
 8040cf8:	4603      	mov	r3, r0
}
 8040cfa:	4618      	mov	r0, r3
 8040cfc:	3708      	adds	r7, #8
 8040cfe:	46bd      	mov	sp, r7
 8040d00:	bd80      	pop	{r7, pc}
	...

08040d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040d04:	b480      	push	{r7}
 8040d06:	b089      	sub	sp, #36	; 0x24
 8040d08:	af00      	add	r7, sp, #0
 8040d0a:	6078      	str	r0, [r7, #4]
 8040d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8040d0e:	2300      	movs	r3, #0
 8040d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8040d12:	2300      	movs	r3, #0
 8040d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8040d16:	2300      	movs	r3, #0
 8040d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040d1a:	2300      	movs	r3, #0
 8040d1c:	61fb      	str	r3, [r7, #28]
 8040d1e:	e165      	b.n	8040fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8040d20:	2201      	movs	r2, #1
 8040d22:	69fb      	ldr	r3, [r7, #28]
 8040d24:	fa02 f303 	lsl.w	r3, r2, r3
 8040d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040d2a:	683b      	ldr	r3, [r7, #0]
 8040d2c:	681b      	ldr	r3, [r3, #0]
 8040d2e:	697a      	ldr	r2, [r7, #20]
 8040d30:	4013      	ands	r3, r2
 8040d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040d34:	693a      	ldr	r2, [r7, #16]
 8040d36:	697b      	ldr	r3, [r7, #20]
 8040d38:	429a      	cmp	r2, r3
 8040d3a:	f040 8154 	bne.w	8040fe6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040d3e:	683b      	ldr	r3, [r7, #0]
 8040d40:	685b      	ldr	r3, [r3, #4]
 8040d42:	f003 0303 	and.w	r3, r3, #3
 8040d46:	2b01      	cmp	r3, #1
 8040d48:	d005      	beq.n	8040d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040d4a:	683b      	ldr	r3, [r7, #0]
 8040d4c:	685b      	ldr	r3, [r3, #4]
 8040d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040d52:	2b02      	cmp	r3, #2
 8040d54:	d130      	bne.n	8040db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040d56:	687b      	ldr	r3, [r7, #4]
 8040d58:	689b      	ldr	r3, [r3, #8]
 8040d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8040d5c:	69fb      	ldr	r3, [r7, #28]
 8040d5e:	005b      	lsls	r3, r3, #1
 8040d60:	2203      	movs	r2, #3
 8040d62:	fa02 f303 	lsl.w	r3, r2, r3
 8040d66:	43db      	mvns	r3, r3
 8040d68:	69ba      	ldr	r2, [r7, #24]
 8040d6a:	4013      	ands	r3, r2
 8040d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040d6e:	683b      	ldr	r3, [r7, #0]
 8040d70:	68da      	ldr	r2, [r3, #12]
 8040d72:	69fb      	ldr	r3, [r7, #28]
 8040d74:	005b      	lsls	r3, r3, #1
 8040d76:	fa02 f303 	lsl.w	r3, r2, r3
 8040d7a:	69ba      	ldr	r2, [r7, #24]
 8040d7c:	4313      	orrs	r3, r2
 8040d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040d80:	687b      	ldr	r3, [r7, #4]
 8040d82:	69ba      	ldr	r2, [r7, #24]
 8040d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040d86:	687b      	ldr	r3, [r7, #4]
 8040d88:	685b      	ldr	r3, [r3, #4]
 8040d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040d8c:	2201      	movs	r2, #1
 8040d8e:	69fb      	ldr	r3, [r7, #28]
 8040d90:	fa02 f303 	lsl.w	r3, r2, r3
 8040d94:	43db      	mvns	r3, r3
 8040d96:	69ba      	ldr	r2, [r7, #24]
 8040d98:	4013      	ands	r3, r2
 8040d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040d9c:	683b      	ldr	r3, [r7, #0]
 8040d9e:	685b      	ldr	r3, [r3, #4]
 8040da0:	091b      	lsrs	r3, r3, #4
 8040da2:	f003 0201 	and.w	r2, r3, #1
 8040da6:	69fb      	ldr	r3, [r7, #28]
 8040da8:	fa02 f303 	lsl.w	r3, r2, r3
 8040dac:	69ba      	ldr	r2, [r7, #24]
 8040dae:	4313      	orrs	r3, r2
 8040db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040db2:	687b      	ldr	r3, [r7, #4]
 8040db4:	69ba      	ldr	r2, [r7, #24]
 8040db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040db8:	683b      	ldr	r3, [r7, #0]
 8040dba:	685b      	ldr	r3, [r3, #4]
 8040dbc:	f003 0303 	and.w	r3, r3, #3
 8040dc0:	2b03      	cmp	r3, #3
 8040dc2:	d017      	beq.n	8040df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040dc4:	687b      	ldr	r3, [r7, #4]
 8040dc6:	68db      	ldr	r3, [r3, #12]
 8040dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8040dca:	69fb      	ldr	r3, [r7, #28]
 8040dcc:	005b      	lsls	r3, r3, #1
 8040dce:	2203      	movs	r2, #3
 8040dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8040dd4:	43db      	mvns	r3, r3
 8040dd6:	69ba      	ldr	r2, [r7, #24]
 8040dd8:	4013      	ands	r3, r2
 8040dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040ddc:	683b      	ldr	r3, [r7, #0]
 8040dde:	689a      	ldr	r2, [r3, #8]
 8040de0:	69fb      	ldr	r3, [r7, #28]
 8040de2:	005b      	lsls	r3, r3, #1
 8040de4:	fa02 f303 	lsl.w	r3, r2, r3
 8040de8:	69ba      	ldr	r2, [r7, #24]
 8040dea:	4313      	orrs	r3, r2
 8040dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040dee:	687b      	ldr	r3, [r7, #4]
 8040df0:	69ba      	ldr	r2, [r7, #24]
 8040df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040df4:	683b      	ldr	r3, [r7, #0]
 8040df6:	685b      	ldr	r3, [r3, #4]
 8040df8:	f003 0303 	and.w	r3, r3, #3
 8040dfc:	2b02      	cmp	r3, #2
 8040dfe:	d123      	bne.n	8040e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040e00:	69fb      	ldr	r3, [r7, #28]
 8040e02:	08da      	lsrs	r2, r3, #3
 8040e04:	687b      	ldr	r3, [r7, #4]
 8040e06:	3208      	adds	r2, #8
 8040e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8040e0e:	69fb      	ldr	r3, [r7, #28]
 8040e10:	f003 0307 	and.w	r3, r3, #7
 8040e14:	009b      	lsls	r3, r3, #2
 8040e16:	220f      	movs	r2, #15
 8040e18:	fa02 f303 	lsl.w	r3, r2, r3
 8040e1c:	43db      	mvns	r3, r3
 8040e1e:	69ba      	ldr	r2, [r7, #24]
 8040e20:	4013      	ands	r3, r2
 8040e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8040e24:	683b      	ldr	r3, [r7, #0]
 8040e26:	691a      	ldr	r2, [r3, #16]
 8040e28:	69fb      	ldr	r3, [r7, #28]
 8040e2a:	f003 0307 	and.w	r3, r3, #7
 8040e2e:	009b      	lsls	r3, r3, #2
 8040e30:	fa02 f303 	lsl.w	r3, r2, r3
 8040e34:	69ba      	ldr	r2, [r7, #24]
 8040e36:	4313      	orrs	r3, r2
 8040e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8040e3a:	69fb      	ldr	r3, [r7, #28]
 8040e3c:	08da      	lsrs	r2, r3, #3
 8040e3e:	687b      	ldr	r3, [r7, #4]
 8040e40:	3208      	adds	r2, #8
 8040e42:	69b9      	ldr	r1, [r7, #24]
 8040e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040e48:	687b      	ldr	r3, [r7, #4]
 8040e4a:	681b      	ldr	r3, [r3, #0]
 8040e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8040e4e:	69fb      	ldr	r3, [r7, #28]
 8040e50:	005b      	lsls	r3, r3, #1
 8040e52:	2203      	movs	r2, #3
 8040e54:	fa02 f303 	lsl.w	r3, r2, r3
 8040e58:	43db      	mvns	r3, r3
 8040e5a:	69ba      	ldr	r2, [r7, #24]
 8040e5c:	4013      	ands	r3, r2
 8040e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040e60:	683b      	ldr	r3, [r7, #0]
 8040e62:	685b      	ldr	r3, [r3, #4]
 8040e64:	f003 0203 	and.w	r2, r3, #3
 8040e68:	69fb      	ldr	r3, [r7, #28]
 8040e6a:	005b      	lsls	r3, r3, #1
 8040e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8040e70:	69ba      	ldr	r2, [r7, #24]
 8040e72:	4313      	orrs	r3, r2
 8040e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040e76:	687b      	ldr	r3, [r7, #4]
 8040e78:	69ba      	ldr	r2, [r7, #24]
 8040e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8040e7c:	683b      	ldr	r3, [r7, #0]
 8040e7e:	685b      	ldr	r3, [r3, #4]
 8040e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040e84:	2b00      	cmp	r3, #0
 8040e86:	f000 80ae 	beq.w	8040fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040e8a:	2300      	movs	r3, #0
 8040e8c:	60fb      	str	r3, [r7, #12]
 8040e8e:	4b5d      	ldr	r3, [pc, #372]	; (8041004 <HAL_GPIO_Init+0x300>)
 8040e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040e92:	4a5c      	ldr	r2, [pc, #368]	; (8041004 <HAL_GPIO_Init+0x300>)
 8040e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040e98:	6453      	str	r3, [r2, #68]	; 0x44
 8040e9a:	4b5a      	ldr	r3, [pc, #360]	; (8041004 <HAL_GPIO_Init+0x300>)
 8040e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040ea2:	60fb      	str	r3, [r7, #12]
 8040ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8040ea6:	4a58      	ldr	r2, [pc, #352]	; (8041008 <HAL_GPIO_Init+0x304>)
 8040ea8:	69fb      	ldr	r3, [r7, #28]
 8040eaa:	089b      	lsrs	r3, r3, #2
 8040eac:	3302      	adds	r3, #2
 8040eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8040eb4:	69fb      	ldr	r3, [r7, #28]
 8040eb6:	f003 0303 	and.w	r3, r3, #3
 8040eba:	009b      	lsls	r3, r3, #2
 8040ebc:	220f      	movs	r2, #15
 8040ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8040ec2:	43db      	mvns	r3, r3
 8040ec4:	69ba      	ldr	r2, [r7, #24]
 8040ec6:	4013      	ands	r3, r2
 8040ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8040eca:	687b      	ldr	r3, [r7, #4]
 8040ecc:	4a4f      	ldr	r2, [pc, #316]	; (804100c <HAL_GPIO_Init+0x308>)
 8040ece:	4293      	cmp	r3, r2
 8040ed0:	d025      	beq.n	8040f1e <HAL_GPIO_Init+0x21a>
 8040ed2:	687b      	ldr	r3, [r7, #4]
 8040ed4:	4a4e      	ldr	r2, [pc, #312]	; (8041010 <HAL_GPIO_Init+0x30c>)
 8040ed6:	4293      	cmp	r3, r2
 8040ed8:	d01f      	beq.n	8040f1a <HAL_GPIO_Init+0x216>
 8040eda:	687b      	ldr	r3, [r7, #4]
 8040edc:	4a4d      	ldr	r2, [pc, #308]	; (8041014 <HAL_GPIO_Init+0x310>)
 8040ede:	4293      	cmp	r3, r2
 8040ee0:	d019      	beq.n	8040f16 <HAL_GPIO_Init+0x212>
 8040ee2:	687b      	ldr	r3, [r7, #4]
 8040ee4:	4a4c      	ldr	r2, [pc, #304]	; (8041018 <HAL_GPIO_Init+0x314>)
 8040ee6:	4293      	cmp	r3, r2
 8040ee8:	d013      	beq.n	8040f12 <HAL_GPIO_Init+0x20e>
 8040eea:	687b      	ldr	r3, [r7, #4]
 8040eec:	4a4b      	ldr	r2, [pc, #300]	; (804101c <HAL_GPIO_Init+0x318>)
 8040eee:	4293      	cmp	r3, r2
 8040ef0:	d00d      	beq.n	8040f0e <HAL_GPIO_Init+0x20a>
 8040ef2:	687b      	ldr	r3, [r7, #4]
 8040ef4:	4a4a      	ldr	r2, [pc, #296]	; (8041020 <HAL_GPIO_Init+0x31c>)
 8040ef6:	4293      	cmp	r3, r2
 8040ef8:	d007      	beq.n	8040f0a <HAL_GPIO_Init+0x206>
 8040efa:	687b      	ldr	r3, [r7, #4]
 8040efc:	4a49      	ldr	r2, [pc, #292]	; (8041024 <HAL_GPIO_Init+0x320>)
 8040efe:	4293      	cmp	r3, r2
 8040f00:	d101      	bne.n	8040f06 <HAL_GPIO_Init+0x202>
 8040f02:	2306      	movs	r3, #6
 8040f04:	e00c      	b.n	8040f20 <HAL_GPIO_Init+0x21c>
 8040f06:	2307      	movs	r3, #7
 8040f08:	e00a      	b.n	8040f20 <HAL_GPIO_Init+0x21c>
 8040f0a:	2305      	movs	r3, #5
 8040f0c:	e008      	b.n	8040f20 <HAL_GPIO_Init+0x21c>
 8040f0e:	2304      	movs	r3, #4
 8040f10:	e006      	b.n	8040f20 <HAL_GPIO_Init+0x21c>
 8040f12:	2303      	movs	r3, #3
 8040f14:	e004      	b.n	8040f20 <HAL_GPIO_Init+0x21c>
 8040f16:	2302      	movs	r3, #2
 8040f18:	e002      	b.n	8040f20 <HAL_GPIO_Init+0x21c>
 8040f1a:	2301      	movs	r3, #1
 8040f1c:	e000      	b.n	8040f20 <HAL_GPIO_Init+0x21c>
 8040f1e:	2300      	movs	r3, #0
 8040f20:	69fa      	ldr	r2, [r7, #28]
 8040f22:	f002 0203 	and.w	r2, r2, #3
 8040f26:	0092      	lsls	r2, r2, #2
 8040f28:	4093      	lsls	r3, r2
 8040f2a:	69ba      	ldr	r2, [r7, #24]
 8040f2c:	4313      	orrs	r3, r2
 8040f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8040f30:	4935      	ldr	r1, [pc, #212]	; (8041008 <HAL_GPIO_Init+0x304>)
 8040f32:	69fb      	ldr	r3, [r7, #28]
 8040f34:	089b      	lsrs	r3, r3, #2
 8040f36:	3302      	adds	r3, #2
 8040f38:	69ba      	ldr	r2, [r7, #24]
 8040f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040f3e:	4b3a      	ldr	r3, [pc, #232]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040f40:	689b      	ldr	r3, [r3, #8]
 8040f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f44:	693b      	ldr	r3, [r7, #16]
 8040f46:	43db      	mvns	r3, r3
 8040f48:	69ba      	ldr	r2, [r7, #24]
 8040f4a:	4013      	ands	r3, r2
 8040f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8040f4e:	683b      	ldr	r3, [r7, #0]
 8040f50:	685b      	ldr	r3, [r3, #4]
 8040f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040f56:	2b00      	cmp	r3, #0
 8040f58:	d003      	beq.n	8040f62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8040f5a:	69ba      	ldr	r2, [r7, #24]
 8040f5c:	693b      	ldr	r3, [r7, #16]
 8040f5e:	4313      	orrs	r3, r2
 8040f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8040f62:	4a31      	ldr	r2, [pc, #196]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040f64:	69bb      	ldr	r3, [r7, #24]
 8040f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040f68:	4b2f      	ldr	r3, [pc, #188]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040f6a:	68db      	ldr	r3, [r3, #12]
 8040f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f6e:	693b      	ldr	r3, [r7, #16]
 8040f70:	43db      	mvns	r3, r3
 8040f72:	69ba      	ldr	r2, [r7, #24]
 8040f74:	4013      	ands	r3, r2
 8040f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8040f78:	683b      	ldr	r3, [r7, #0]
 8040f7a:	685b      	ldr	r3, [r3, #4]
 8040f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040f80:	2b00      	cmp	r3, #0
 8040f82:	d003      	beq.n	8040f8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8040f84:	69ba      	ldr	r2, [r7, #24]
 8040f86:	693b      	ldr	r3, [r7, #16]
 8040f88:	4313      	orrs	r3, r2
 8040f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8040f8c:	4a26      	ldr	r2, [pc, #152]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040f8e:	69bb      	ldr	r3, [r7, #24]
 8040f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040f92:	4b25      	ldr	r3, [pc, #148]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040f94:	685b      	ldr	r3, [r3, #4]
 8040f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040f98:	693b      	ldr	r3, [r7, #16]
 8040f9a:	43db      	mvns	r3, r3
 8040f9c:	69ba      	ldr	r2, [r7, #24]
 8040f9e:	4013      	ands	r3, r2
 8040fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8040fa2:	683b      	ldr	r3, [r7, #0]
 8040fa4:	685b      	ldr	r3, [r3, #4]
 8040fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040faa:	2b00      	cmp	r3, #0
 8040fac:	d003      	beq.n	8040fb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8040fae:	69ba      	ldr	r2, [r7, #24]
 8040fb0:	693b      	ldr	r3, [r7, #16]
 8040fb2:	4313      	orrs	r3, r2
 8040fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8040fb6:	4a1c      	ldr	r2, [pc, #112]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040fb8:	69bb      	ldr	r3, [r7, #24]
 8040fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040fbc:	4b1a      	ldr	r3, [pc, #104]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040fbe:	681b      	ldr	r3, [r3, #0]
 8040fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040fc2:	693b      	ldr	r3, [r7, #16]
 8040fc4:	43db      	mvns	r3, r3
 8040fc6:	69ba      	ldr	r2, [r7, #24]
 8040fc8:	4013      	ands	r3, r2
 8040fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8040fcc:	683b      	ldr	r3, [r7, #0]
 8040fce:	685b      	ldr	r3, [r3, #4]
 8040fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040fd4:	2b00      	cmp	r3, #0
 8040fd6:	d003      	beq.n	8040fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8040fd8:	69ba      	ldr	r2, [r7, #24]
 8040fda:	693b      	ldr	r3, [r7, #16]
 8040fdc:	4313      	orrs	r3, r2
 8040fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8040fe0:	4a11      	ldr	r2, [pc, #68]	; (8041028 <HAL_GPIO_Init+0x324>)
 8040fe2:	69bb      	ldr	r3, [r7, #24]
 8040fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040fe6:	69fb      	ldr	r3, [r7, #28]
 8040fe8:	3301      	adds	r3, #1
 8040fea:	61fb      	str	r3, [r7, #28]
 8040fec:	69fb      	ldr	r3, [r7, #28]
 8040fee:	2b0f      	cmp	r3, #15
 8040ff0:	f67f ae96 	bls.w	8040d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8040ff4:	bf00      	nop
 8040ff6:	bf00      	nop
 8040ff8:	3724      	adds	r7, #36	; 0x24
 8040ffa:	46bd      	mov	sp, r7
 8040ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041000:	4770      	bx	lr
 8041002:	bf00      	nop
 8041004:	40023800 	.word	0x40023800
 8041008:	40013800 	.word	0x40013800
 804100c:	40020000 	.word	0x40020000
 8041010:	40020400 	.word	0x40020400
 8041014:	40020800 	.word	0x40020800
 8041018:	40020c00 	.word	0x40020c00
 804101c:	40021000 	.word	0x40021000
 8041020:	40021400 	.word	0x40021400
 8041024:	40021800 	.word	0x40021800
 8041028:	40013c00 	.word	0x40013c00

0804102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 804102c:	b480      	push	{r7}
 804102e:	b083      	sub	sp, #12
 8041030:	af00      	add	r7, sp, #0
 8041032:	6078      	str	r0, [r7, #4]
 8041034:	460b      	mov	r3, r1
 8041036:	807b      	strh	r3, [r7, #2]
 8041038:	4613      	mov	r3, r2
 804103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 804103c:	787b      	ldrb	r3, [r7, #1]
 804103e:	2b00      	cmp	r3, #0
 8041040:	d003      	beq.n	804104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041042:	887a      	ldrh	r2, [r7, #2]
 8041044:	687b      	ldr	r3, [r7, #4]
 8041046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8041048:	e003      	b.n	8041052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 804104a:	887b      	ldrh	r3, [r7, #2]
 804104c:	041a      	lsls	r2, r3, #16
 804104e:	687b      	ldr	r3, [r7, #4]
 8041050:	619a      	str	r2, [r3, #24]
}
 8041052:	bf00      	nop
 8041054:	370c      	adds	r7, #12
 8041056:	46bd      	mov	sp, r7
 8041058:	f85d 7b04 	ldr.w	r7, [sp], #4
 804105c:	4770      	bx	lr
	...

08041060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041060:	b580      	push	{r7, lr}
 8041062:	b084      	sub	sp, #16
 8041064:	af00      	add	r7, sp, #0
 8041066:	6078      	str	r0, [r7, #4]
 8041068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 804106a:	687b      	ldr	r3, [r7, #4]
 804106c:	2b00      	cmp	r3, #0
 804106e:	d101      	bne.n	8041074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8041070:	2301      	movs	r3, #1
 8041072:	e0cc      	b.n	804120e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041074:	4b68      	ldr	r3, [pc, #416]	; (8041218 <HAL_RCC_ClockConfig+0x1b8>)
 8041076:	681b      	ldr	r3, [r3, #0]
 8041078:	f003 0307 	and.w	r3, r3, #7
 804107c:	683a      	ldr	r2, [r7, #0]
 804107e:	429a      	cmp	r2, r3
 8041080:	d90c      	bls.n	804109c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041082:	4b65      	ldr	r3, [pc, #404]	; (8041218 <HAL_RCC_ClockConfig+0x1b8>)
 8041084:	683a      	ldr	r2, [r7, #0]
 8041086:	b2d2      	uxtb	r2, r2
 8041088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804108a:	4b63      	ldr	r3, [pc, #396]	; (8041218 <HAL_RCC_ClockConfig+0x1b8>)
 804108c:	681b      	ldr	r3, [r3, #0]
 804108e:	f003 0307 	and.w	r3, r3, #7
 8041092:	683a      	ldr	r2, [r7, #0]
 8041094:	429a      	cmp	r2, r3
 8041096:	d001      	beq.n	804109c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8041098:	2301      	movs	r3, #1
 804109a:	e0b8      	b.n	804120e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804109c:	687b      	ldr	r3, [r7, #4]
 804109e:	681b      	ldr	r3, [r3, #0]
 80410a0:	f003 0302 	and.w	r3, r3, #2
 80410a4:	2b00      	cmp	r3, #0
 80410a6:	d020      	beq.n	80410ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80410a8:	687b      	ldr	r3, [r7, #4]
 80410aa:	681b      	ldr	r3, [r3, #0]
 80410ac:	f003 0304 	and.w	r3, r3, #4
 80410b0:	2b00      	cmp	r3, #0
 80410b2:	d005      	beq.n	80410c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80410b4:	4b59      	ldr	r3, [pc, #356]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80410b6:	689b      	ldr	r3, [r3, #8]
 80410b8:	4a58      	ldr	r2, [pc, #352]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80410ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80410be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80410c0:	687b      	ldr	r3, [r7, #4]
 80410c2:	681b      	ldr	r3, [r3, #0]
 80410c4:	f003 0308 	and.w	r3, r3, #8
 80410c8:	2b00      	cmp	r3, #0
 80410ca:	d005      	beq.n	80410d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80410cc:	4b53      	ldr	r3, [pc, #332]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80410ce:	689b      	ldr	r3, [r3, #8]
 80410d0:	4a52      	ldr	r2, [pc, #328]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80410d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80410d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80410d8:	4b50      	ldr	r3, [pc, #320]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80410da:	689b      	ldr	r3, [r3, #8]
 80410dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80410e0:	687b      	ldr	r3, [r7, #4]
 80410e2:	689b      	ldr	r3, [r3, #8]
 80410e4:	494d      	ldr	r1, [pc, #308]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80410e6:	4313      	orrs	r3, r2
 80410e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	681b      	ldr	r3, [r3, #0]
 80410ee:	f003 0301 	and.w	r3, r3, #1
 80410f2:	2b00      	cmp	r3, #0
 80410f4:	d044      	beq.n	8041180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80410f6:	687b      	ldr	r3, [r7, #4]
 80410f8:	685b      	ldr	r3, [r3, #4]
 80410fa:	2b01      	cmp	r3, #1
 80410fc:	d107      	bne.n	804110e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80410fe:	4b47      	ldr	r3, [pc, #284]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 8041100:	681b      	ldr	r3, [r3, #0]
 8041102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041106:	2b00      	cmp	r3, #0
 8041108:	d119      	bne.n	804113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804110a:	2301      	movs	r3, #1
 804110c:	e07f      	b.n	804120e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804110e:	687b      	ldr	r3, [r7, #4]
 8041110:	685b      	ldr	r3, [r3, #4]
 8041112:	2b02      	cmp	r3, #2
 8041114:	d003      	beq.n	804111e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8041116:	687b      	ldr	r3, [r7, #4]
 8041118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804111a:	2b03      	cmp	r3, #3
 804111c:	d107      	bne.n	804112e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804111e:	4b3f      	ldr	r3, [pc, #252]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 8041120:	681b      	ldr	r3, [r3, #0]
 8041122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041126:	2b00      	cmp	r3, #0
 8041128:	d109      	bne.n	804113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804112a:	2301      	movs	r3, #1
 804112c:	e06f      	b.n	804120e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804112e:	4b3b      	ldr	r3, [pc, #236]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 8041130:	681b      	ldr	r3, [r3, #0]
 8041132:	f003 0302 	and.w	r3, r3, #2
 8041136:	2b00      	cmp	r3, #0
 8041138:	d101      	bne.n	804113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804113a:	2301      	movs	r3, #1
 804113c:	e067      	b.n	804120e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804113e:	4b37      	ldr	r3, [pc, #220]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 8041140:	689b      	ldr	r3, [r3, #8]
 8041142:	f023 0203 	bic.w	r2, r3, #3
 8041146:	687b      	ldr	r3, [r7, #4]
 8041148:	685b      	ldr	r3, [r3, #4]
 804114a:	4934      	ldr	r1, [pc, #208]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 804114c:	4313      	orrs	r3, r2
 804114e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8041150:	f7ff fcc2 	bl	8040ad8 <HAL_GetTick>
 8041154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041156:	e00a      	b.n	804116e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041158:	f7ff fcbe 	bl	8040ad8 <HAL_GetTick>
 804115c:	4602      	mov	r2, r0
 804115e:	68fb      	ldr	r3, [r7, #12]
 8041160:	1ad3      	subs	r3, r2, r3
 8041162:	f241 3288 	movw	r2, #5000	; 0x1388
 8041166:	4293      	cmp	r3, r2
 8041168:	d901      	bls.n	804116e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 804116a:	2303      	movs	r3, #3
 804116c:	e04f      	b.n	804120e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804116e:	4b2b      	ldr	r3, [pc, #172]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 8041170:	689b      	ldr	r3, [r3, #8]
 8041172:	f003 020c 	and.w	r2, r3, #12
 8041176:	687b      	ldr	r3, [r7, #4]
 8041178:	685b      	ldr	r3, [r3, #4]
 804117a:	009b      	lsls	r3, r3, #2
 804117c:	429a      	cmp	r2, r3
 804117e:	d1eb      	bne.n	8041158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8041180:	4b25      	ldr	r3, [pc, #148]	; (8041218 <HAL_RCC_ClockConfig+0x1b8>)
 8041182:	681b      	ldr	r3, [r3, #0]
 8041184:	f003 0307 	and.w	r3, r3, #7
 8041188:	683a      	ldr	r2, [r7, #0]
 804118a:	429a      	cmp	r2, r3
 804118c:	d20c      	bcs.n	80411a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804118e:	4b22      	ldr	r3, [pc, #136]	; (8041218 <HAL_RCC_ClockConfig+0x1b8>)
 8041190:	683a      	ldr	r2, [r7, #0]
 8041192:	b2d2      	uxtb	r2, r2
 8041194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041196:	4b20      	ldr	r3, [pc, #128]	; (8041218 <HAL_RCC_ClockConfig+0x1b8>)
 8041198:	681b      	ldr	r3, [r3, #0]
 804119a:	f003 0307 	and.w	r3, r3, #7
 804119e:	683a      	ldr	r2, [r7, #0]
 80411a0:	429a      	cmp	r2, r3
 80411a2:	d001      	beq.n	80411a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80411a4:	2301      	movs	r3, #1
 80411a6:	e032      	b.n	804120e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80411a8:	687b      	ldr	r3, [r7, #4]
 80411aa:	681b      	ldr	r3, [r3, #0]
 80411ac:	f003 0304 	and.w	r3, r3, #4
 80411b0:	2b00      	cmp	r3, #0
 80411b2:	d008      	beq.n	80411c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80411b4:	4b19      	ldr	r3, [pc, #100]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80411b6:	689b      	ldr	r3, [r3, #8]
 80411b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80411bc:	687b      	ldr	r3, [r7, #4]
 80411be:	68db      	ldr	r3, [r3, #12]
 80411c0:	4916      	ldr	r1, [pc, #88]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80411c2:	4313      	orrs	r3, r2
 80411c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80411c6:	687b      	ldr	r3, [r7, #4]
 80411c8:	681b      	ldr	r3, [r3, #0]
 80411ca:	f003 0308 	and.w	r3, r3, #8
 80411ce:	2b00      	cmp	r3, #0
 80411d0:	d009      	beq.n	80411e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80411d2:	4b12      	ldr	r3, [pc, #72]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80411d4:	689b      	ldr	r3, [r3, #8]
 80411d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80411da:	687b      	ldr	r3, [r7, #4]
 80411dc:	691b      	ldr	r3, [r3, #16]
 80411de:	00db      	lsls	r3, r3, #3
 80411e0:	490e      	ldr	r1, [pc, #56]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80411e2:	4313      	orrs	r3, r2
 80411e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80411e6:	f000 f821 	bl	804122c <HAL_RCC_GetSysClockFreq>
 80411ea:	4602      	mov	r2, r0
 80411ec:	4b0b      	ldr	r3, [pc, #44]	; (804121c <HAL_RCC_ClockConfig+0x1bc>)
 80411ee:	689b      	ldr	r3, [r3, #8]
 80411f0:	091b      	lsrs	r3, r3, #4
 80411f2:	f003 030f 	and.w	r3, r3, #15
 80411f6:	490a      	ldr	r1, [pc, #40]	; (8041220 <HAL_RCC_ClockConfig+0x1c0>)
 80411f8:	5ccb      	ldrb	r3, [r1, r3]
 80411fa:	fa22 f303 	lsr.w	r3, r2, r3
 80411fe:	4a09      	ldr	r2, [pc, #36]	; (8041224 <HAL_RCC_ClockConfig+0x1c4>)
 8041200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8041202:	4b09      	ldr	r3, [pc, #36]	; (8041228 <HAL_RCC_ClockConfig+0x1c8>)
 8041204:	681b      	ldr	r3, [r3, #0]
 8041206:	4618      	mov	r0, r3
 8041208:	f7ff fc22 	bl	8040a50 <HAL_InitTick>

  return HAL_OK;
 804120c:	2300      	movs	r3, #0
}
 804120e:	4618      	mov	r0, r3
 8041210:	3710      	adds	r7, #16
 8041212:	46bd      	mov	sp, r7
 8041214:	bd80      	pop	{r7, pc}
 8041216:	bf00      	nop
 8041218:	40023c00 	.word	0x40023c00
 804121c:	40023800 	.word	0x40023800
 8041220:	08042a28 	.word	0x08042a28
 8041224:	20000000 	.word	0x20000000
 8041228:	20000004 	.word	0x20000004

0804122c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804122c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8041230:	b090      	sub	sp, #64	; 0x40
 8041232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8041234:	2300      	movs	r3, #0
 8041236:	637b      	str	r3, [r7, #52]	; 0x34
 8041238:	2300      	movs	r3, #0
 804123a:	63fb      	str	r3, [r7, #60]	; 0x3c
 804123c:	2300      	movs	r3, #0
 804123e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8041240:	2300      	movs	r3, #0
 8041242:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8041244:	4b59      	ldr	r3, [pc, #356]	; (80413ac <HAL_RCC_GetSysClockFreq+0x180>)
 8041246:	689b      	ldr	r3, [r3, #8]
 8041248:	f003 030c 	and.w	r3, r3, #12
 804124c:	2b08      	cmp	r3, #8
 804124e:	d00d      	beq.n	804126c <HAL_RCC_GetSysClockFreq+0x40>
 8041250:	2b08      	cmp	r3, #8
 8041252:	f200 80a1 	bhi.w	8041398 <HAL_RCC_GetSysClockFreq+0x16c>
 8041256:	2b00      	cmp	r3, #0
 8041258:	d002      	beq.n	8041260 <HAL_RCC_GetSysClockFreq+0x34>
 804125a:	2b04      	cmp	r3, #4
 804125c:	d003      	beq.n	8041266 <HAL_RCC_GetSysClockFreq+0x3a>
 804125e:	e09b      	b.n	8041398 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8041260:	4b53      	ldr	r3, [pc, #332]	; (80413b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8041262:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8041264:	e09b      	b.n	804139e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8041266:	4b53      	ldr	r3, [pc, #332]	; (80413b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8041268:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 804126a:	e098      	b.n	804139e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 804126c:	4b4f      	ldr	r3, [pc, #316]	; (80413ac <HAL_RCC_GetSysClockFreq+0x180>)
 804126e:	685b      	ldr	r3, [r3, #4]
 8041270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8041274:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8041276:	4b4d      	ldr	r3, [pc, #308]	; (80413ac <HAL_RCC_GetSysClockFreq+0x180>)
 8041278:	685b      	ldr	r3, [r3, #4]
 804127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804127e:	2b00      	cmp	r3, #0
 8041280:	d028      	beq.n	80412d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041282:	4b4a      	ldr	r3, [pc, #296]	; (80413ac <HAL_RCC_GetSysClockFreq+0x180>)
 8041284:	685b      	ldr	r3, [r3, #4]
 8041286:	099b      	lsrs	r3, r3, #6
 8041288:	2200      	movs	r2, #0
 804128a:	623b      	str	r3, [r7, #32]
 804128c:	627a      	str	r2, [r7, #36]	; 0x24
 804128e:	6a3b      	ldr	r3, [r7, #32]
 8041290:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8041294:	2100      	movs	r1, #0
 8041296:	4b47      	ldr	r3, [pc, #284]	; (80413b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8041298:	fb03 f201 	mul.w	r2, r3, r1
 804129c:	2300      	movs	r3, #0
 804129e:	fb00 f303 	mul.w	r3, r0, r3
 80412a2:	4413      	add	r3, r2
 80412a4:	4a43      	ldr	r2, [pc, #268]	; (80413b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80412a6:	fba0 1202 	umull	r1, r2, r0, r2
 80412aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80412ac:	460a      	mov	r2, r1
 80412ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80412b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80412b2:	4413      	add	r3, r2
 80412b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80412b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80412b8:	2200      	movs	r2, #0
 80412ba:	61bb      	str	r3, [r7, #24]
 80412bc:	61fa      	str	r2, [r7, #28]
 80412be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80412c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80412c6:	f7fe fffb 	bl	80402c0 <__aeabi_uldivmod>
 80412ca:	4602      	mov	r2, r0
 80412cc:	460b      	mov	r3, r1
 80412ce:	4613      	mov	r3, r2
 80412d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80412d2:	e053      	b.n	804137c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80412d4:	4b35      	ldr	r3, [pc, #212]	; (80413ac <HAL_RCC_GetSysClockFreq+0x180>)
 80412d6:	685b      	ldr	r3, [r3, #4]
 80412d8:	099b      	lsrs	r3, r3, #6
 80412da:	2200      	movs	r2, #0
 80412dc:	613b      	str	r3, [r7, #16]
 80412de:	617a      	str	r2, [r7, #20]
 80412e0:	693b      	ldr	r3, [r7, #16]
 80412e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80412e6:	f04f 0b00 	mov.w	fp, #0
 80412ea:	4652      	mov	r2, sl
 80412ec:	465b      	mov	r3, fp
 80412ee:	f04f 0000 	mov.w	r0, #0
 80412f2:	f04f 0100 	mov.w	r1, #0
 80412f6:	0159      	lsls	r1, r3, #5
 80412f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80412fc:	0150      	lsls	r0, r2, #5
 80412fe:	4602      	mov	r2, r0
 8041300:	460b      	mov	r3, r1
 8041302:	ebb2 080a 	subs.w	r8, r2, sl
 8041306:	eb63 090b 	sbc.w	r9, r3, fp
 804130a:	f04f 0200 	mov.w	r2, #0
 804130e:	f04f 0300 	mov.w	r3, #0
 8041312:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8041316:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 804131a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 804131e:	ebb2 0408 	subs.w	r4, r2, r8
 8041322:	eb63 0509 	sbc.w	r5, r3, r9
 8041326:	f04f 0200 	mov.w	r2, #0
 804132a:	f04f 0300 	mov.w	r3, #0
 804132e:	00eb      	lsls	r3, r5, #3
 8041330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8041334:	00e2      	lsls	r2, r4, #3
 8041336:	4614      	mov	r4, r2
 8041338:	461d      	mov	r5, r3
 804133a:	eb14 030a 	adds.w	r3, r4, sl
 804133e:	603b      	str	r3, [r7, #0]
 8041340:	eb45 030b 	adc.w	r3, r5, fp
 8041344:	607b      	str	r3, [r7, #4]
 8041346:	f04f 0200 	mov.w	r2, #0
 804134a:	f04f 0300 	mov.w	r3, #0
 804134e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8041352:	4629      	mov	r1, r5
 8041354:	028b      	lsls	r3, r1, #10
 8041356:	4621      	mov	r1, r4
 8041358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 804135c:	4621      	mov	r1, r4
 804135e:	028a      	lsls	r2, r1, #10
 8041360:	4610      	mov	r0, r2
 8041362:	4619      	mov	r1, r3
 8041364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041366:	2200      	movs	r2, #0
 8041368:	60bb      	str	r3, [r7, #8]
 804136a:	60fa      	str	r2, [r7, #12]
 804136c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8041370:	f7fe ffa6 	bl	80402c0 <__aeabi_uldivmod>
 8041374:	4602      	mov	r2, r0
 8041376:	460b      	mov	r3, r1
 8041378:	4613      	mov	r3, r2
 804137a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 804137c:	4b0b      	ldr	r3, [pc, #44]	; (80413ac <HAL_RCC_GetSysClockFreq+0x180>)
 804137e:	685b      	ldr	r3, [r3, #4]
 8041380:	0c1b      	lsrs	r3, r3, #16
 8041382:	f003 0303 	and.w	r3, r3, #3
 8041386:	3301      	adds	r3, #1
 8041388:	005b      	lsls	r3, r3, #1
 804138a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 804138c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 804138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041390:	fbb2 f3f3 	udiv	r3, r2, r3
 8041394:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041396:	e002      	b.n	804139e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041398:	4b05      	ldr	r3, [pc, #20]	; (80413b0 <HAL_RCC_GetSysClockFreq+0x184>)
 804139a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 804139c:	bf00      	nop
    }
  }
  return sysclockfreq;
 804139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80413a0:	4618      	mov	r0, r3
 80413a2:	3740      	adds	r7, #64	; 0x40
 80413a4:	46bd      	mov	sp, r7
 80413a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80413aa:	bf00      	nop
 80413ac:	40023800 	.word	0x40023800
 80413b0:	00f42400 	.word	0x00f42400
 80413b4:	017d7840 	.word	0x017d7840

080413b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80413b8:	b480      	push	{r7}
 80413ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80413bc:	4b03      	ldr	r3, [pc, #12]	; (80413cc <HAL_RCC_GetHCLKFreq+0x14>)
 80413be:	681b      	ldr	r3, [r3, #0]
}
 80413c0:	4618      	mov	r0, r3
 80413c2:	46bd      	mov	sp, r7
 80413c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413c8:	4770      	bx	lr
 80413ca:	bf00      	nop
 80413cc:	20000000 	.word	0x20000000

080413d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80413d0:	b580      	push	{r7, lr}
 80413d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80413d4:	f7ff fff0 	bl	80413b8 <HAL_RCC_GetHCLKFreq>
 80413d8:	4602      	mov	r2, r0
 80413da:	4b05      	ldr	r3, [pc, #20]	; (80413f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80413dc:	689b      	ldr	r3, [r3, #8]
 80413de:	0a9b      	lsrs	r3, r3, #10
 80413e0:	f003 0307 	and.w	r3, r3, #7
 80413e4:	4903      	ldr	r1, [pc, #12]	; (80413f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80413e6:	5ccb      	ldrb	r3, [r1, r3]
 80413e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413ec:	4618      	mov	r0, r3
 80413ee:	bd80      	pop	{r7, pc}
 80413f0:	40023800 	.word	0x40023800
 80413f4:	08042a38 	.word	0x08042a38

080413f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80413f8:	b580      	push	{r7, lr}
 80413fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80413fc:	f7ff ffdc 	bl	80413b8 <HAL_RCC_GetHCLKFreq>
 8041400:	4602      	mov	r2, r0
 8041402:	4b05      	ldr	r3, [pc, #20]	; (8041418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041404:	689b      	ldr	r3, [r3, #8]
 8041406:	0b5b      	lsrs	r3, r3, #13
 8041408:	f003 0307 	and.w	r3, r3, #7
 804140c:	4903      	ldr	r1, [pc, #12]	; (804141c <HAL_RCC_GetPCLK2Freq+0x24>)
 804140e:	5ccb      	ldrb	r3, [r1, r3]
 8041410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041414:	4618      	mov	r0, r3
 8041416:	bd80      	pop	{r7, pc}
 8041418:	40023800 	.word	0x40023800
 804141c:	08042a38 	.word	0x08042a38

08041420 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041420:	b580      	push	{r7, lr}
 8041422:	b086      	sub	sp, #24
 8041424:	af00      	add	r7, sp, #0
 8041426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8041428:	687b      	ldr	r3, [r7, #4]
 804142a:	2b00      	cmp	r3, #0
 804142c:	d101      	bne.n	8041432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804142e:	2301      	movs	r3, #1
 8041430:	e273      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041432:	687b      	ldr	r3, [r7, #4]
 8041434:	681b      	ldr	r3, [r3, #0]
 8041436:	f003 0301 	and.w	r3, r3, #1
 804143a:	2b00      	cmp	r3, #0
 804143c:	d075      	beq.n	804152a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 804143e:	4b88      	ldr	r3, [pc, #544]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041440:	689b      	ldr	r3, [r3, #8]
 8041442:	f003 030c 	and.w	r3, r3, #12
 8041446:	2b04      	cmp	r3, #4
 8041448:	d00c      	beq.n	8041464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804144a:	4b85      	ldr	r3, [pc, #532]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 804144c:	689b      	ldr	r3, [r3, #8]
 804144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8041452:	2b08      	cmp	r3, #8
 8041454:	d112      	bne.n	804147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041456:	4b82      	ldr	r3, [pc, #520]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041458:	685b      	ldr	r3, [r3, #4]
 804145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804145e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041462:	d10b      	bne.n	804147c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041464:	4b7e      	ldr	r3, [pc, #504]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041466:	681b      	ldr	r3, [r3, #0]
 8041468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804146c:	2b00      	cmp	r3, #0
 804146e:	d05b      	beq.n	8041528 <HAL_RCC_OscConfig+0x108>
 8041470:	687b      	ldr	r3, [r7, #4]
 8041472:	685b      	ldr	r3, [r3, #4]
 8041474:	2b00      	cmp	r3, #0
 8041476:	d157      	bne.n	8041528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8041478:	2301      	movs	r3, #1
 804147a:	e24e      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804147c:	687b      	ldr	r3, [r7, #4]
 804147e:	685b      	ldr	r3, [r3, #4]
 8041480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041484:	d106      	bne.n	8041494 <HAL_RCC_OscConfig+0x74>
 8041486:	4b76      	ldr	r3, [pc, #472]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041488:	681b      	ldr	r3, [r3, #0]
 804148a:	4a75      	ldr	r2, [pc, #468]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 804148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041490:	6013      	str	r3, [r2, #0]
 8041492:	e01d      	b.n	80414d0 <HAL_RCC_OscConfig+0xb0>
 8041494:	687b      	ldr	r3, [r7, #4]
 8041496:	685b      	ldr	r3, [r3, #4]
 8041498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 804149c:	d10c      	bne.n	80414b8 <HAL_RCC_OscConfig+0x98>
 804149e:	4b70      	ldr	r3, [pc, #448]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414a0:	681b      	ldr	r3, [r3, #0]
 80414a2:	4a6f      	ldr	r2, [pc, #444]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80414a8:	6013      	str	r3, [r2, #0]
 80414aa:	4b6d      	ldr	r3, [pc, #436]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414ac:	681b      	ldr	r3, [r3, #0]
 80414ae:	4a6c      	ldr	r2, [pc, #432]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80414b4:	6013      	str	r3, [r2, #0]
 80414b6:	e00b      	b.n	80414d0 <HAL_RCC_OscConfig+0xb0>
 80414b8:	4b69      	ldr	r3, [pc, #420]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414ba:	681b      	ldr	r3, [r3, #0]
 80414bc:	4a68      	ldr	r2, [pc, #416]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80414c2:	6013      	str	r3, [r2, #0]
 80414c4:	4b66      	ldr	r3, [pc, #408]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414c6:	681b      	ldr	r3, [r3, #0]
 80414c8:	4a65      	ldr	r2, [pc, #404]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80414ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80414d0:	687b      	ldr	r3, [r7, #4]
 80414d2:	685b      	ldr	r3, [r3, #4]
 80414d4:	2b00      	cmp	r3, #0
 80414d6:	d013      	beq.n	8041500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80414d8:	f7ff fafe 	bl	8040ad8 <HAL_GetTick>
 80414dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80414de:	e008      	b.n	80414f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80414e0:	f7ff fafa 	bl	8040ad8 <HAL_GetTick>
 80414e4:	4602      	mov	r2, r0
 80414e6:	693b      	ldr	r3, [r7, #16]
 80414e8:	1ad3      	subs	r3, r2, r3
 80414ea:	2b64      	cmp	r3, #100	; 0x64
 80414ec:	d901      	bls.n	80414f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80414ee:	2303      	movs	r3, #3
 80414f0:	e213      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80414f2:	4b5b      	ldr	r3, [pc, #364]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80414f4:	681b      	ldr	r3, [r3, #0]
 80414f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80414fa:	2b00      	cmp	r3, #0
 80414fc:	d0f0      	beq.n	80414e0 <HAL_RCC_OscConfig+0xc0>
 80414fe:	e014      	b.n	804152a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041500:	f7ff faea 	bl	8040ad8 <HAL_GetTick>
 8041504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041506:	e008      	b.n	804151a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8041508:	f7ff fae6 	bl	8040ad8 <HAL_GetTick>
 804150c:	4602      	mov	r2, r0
 804150e:	693b      	ldr	r3, [r7, #16]
 8041510:	1ad3      	subs	r3, r2, r3
 8041512:	2b64      	cmp	r3, #100	; 0x64
 8041514:	d901      	bls.n	804151a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041516:	2303      	movs	r3, #3
 8041518:	e1ff      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804151a:	4b51      	ldr	r3, [pc, #324]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 804151c:	681b      	ldr	r3, [r3, #0]
 804151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041522:	2b00      	cmp	r3, #0
 8041524:	d1f0      	bne.n	8041508 <HAL_RCC_OscConfig+0xe8>
 8041526:	e000      	b.n	804152a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804152a:	687b      	ldr	r3, [r7, #4]
 804152c:	681b      	ldr	r3, [r3, #0]
 804152e:	f003 0302 	and.w	r3, r3, #2
 8041532:	2b00      	cmp	r3, #0
 8041534:	d063      	beq.n	80415fe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8041536:	4b4a      	ldr	r3, [pc, #296]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041538:	689b      	ldr	r3, [r3, #8]
 804153a:	f003 030c 	and.w	r3, r3, #12
 804153e:	2b00      	cmp	r3, #0
 8041540:	d00b      	beq.n	804155a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8041542:	4b47      	ldr	r3, [pc, #284]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041544:	689b      	ldr	r3, [r3, #8]
 8041546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 804154a:	2b08      	cmp	r3, #8
 804154c:	d11c      	bne.n	8041588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804154e:	4b44      	ldr	r3, [pc, #272]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041550:	685b      	ldr	r3, [r3, #4]
 8041552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041556:	2b00      	cmp	r3, #0
 8041558:	d116      	bne.n	8041588 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804155a:	4b41      	ldr	r3, [pc, #260]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 804155c:	681b      	ldr	r3, [r3, #0]
 804155e:	f003 0302 	and.w	r3, r3, #2
 8041562:	2b00      	cmp	r3, #0
 8041564:	d005      	beq.n	8041572 <HAL_RCC_OscConfig+0x152>
 8041566:	687b      	ldr	r3, [r7, #4]
 8041568:	68db      	ldr	r3, [r3, #12]
 804156a:	2b01      	cmp	r3, #1
 804156c:	d001      	beq.n	8041572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 804156e:	2301      	movs	r3, #1
 8041570:	e1d3      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041572:	4b3b      	ldr	r3, [pc, #236]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041574:	681b      	ldr	r3, [r3, #0]
 8041576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804157a:	687b      	ldr	r3, [r7, #4]
 804157c:	691b      	ldr	r3, [r3, #16]
 804157e:	00db      	lsls	r3, r3, #3
 8041580:	4937      	ldr	r1, [pc, #220]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041582:	4313      	orrs	r3, r2
 8041584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041586:	e03a      	b.n	80415fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8041588:	687b      	ldr	r3, [r7, #4]
 804158a:	68db      	ldr	r3, [r3, #12]
 804158c:	2b00      	cmp	r3, #0
 804158e:	d020      	beq.n	80415d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041590:	4b34      	ldr	r3, [pc, #208]	; (8041664 <HAL_RCC_OscConfig+0x244>)
 8041592:	2201      	movs	r2, #1
 8041594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041596:	f7ff fa9f 	bl	8040ad8 <HAL_GetTick>
 804159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804159c:	e008      	b.n	80415b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804159e:	f7ff fa9b 	bl	8040ad8 <HAL_GetTick>
 80415a2:	4602      	mov	r2, r0
 80415a4:	693b      	ldr	r3, [r7, #16]
 80415a6:	1ad3      	subs	r3, r2, r3
 80415a8:	2b02      	cmp	r3, #2
 80415aa:	d901      	bls.n	80415b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80415ac:	2303      	movs	r3, #3
 80415ae:	e1b4      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80415b0:	4b2b      	ldr	r3, [pc, #172]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80415b2:	681b      	ldr	r3, [r3, #0]
 80415b4:	f003 0302 	and.w	r3, r3, #2
 80415b8:	2b00      	cmp	r3, #0
 80415ba:	d0f0      	beq.n	804159e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80415bc:	4b28      	ldr	r3, [pc, #160]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80415be:	681b      	ldr	r3, [r3, #0]
 80415c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80415c4:	687b      	ldr	r3, [r7, #4]
 80415c6:	691b      	ldr	r3, [r3, #16]
 80415c8:	00db      	lsls	r3, r3, #3
 80415ca:	4925      	ldr	r1, [pc, #148]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80415cc:	4313      	orrs	r3, r2
 80415ce:	600b      	str	r3, [r1, #0]
 80415d0:	e015      	b.n	80415fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80415d2:	4b24      	ldr	r3, [pc, #144]	; (8041664 <HAL_RCC_OscConfig+0x244>)
 80415d4:	2200      	movs	r2, #0
 80415d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80415d8:	f7ff fa7e 	bl	8040ad8 <HAL_GetTick>
 80415dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80415de:	e008      	b.n	80415f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80415e0:	f7ff fa7a 	bl	8040ad8 <HAL_GetTick>
 80415e4:	4602      	mov	r2, r0
 80415e6:	693b      	ldr	r3, [r7, #16]
 80415e8:	1ad3      	subs	r3, r2, r3
 80415ea:	2b02      	cmp	r3, #2
 80415ec:	d901      	bls.n	80415f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80415ee:	2303      	movs	r3, #3
 80415f0:	e193      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80415f2:	4b1b      	ldr	r3, [pc, #108]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 80415f4:	681b      	ldr	r3, [r3, #0]
 80415f6:	f003 0302 	and.w	r3, r3, #2
 80415fa:	2b00      	cmp	r3, #0
 80415fc:	d1f0      	bne.n	80415e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80415fe:	687b      	ldr	r3, [r7, #4]
 8041600:	681b      	ldr	r3, [r3, #0]
 8041602:	f003 0308 	and.w	r3, r3, #8
 8041606:	2b00      	cmp	r3, #0
 8041608:	d036      	beq.n	8041678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 804160a:	687b      	ldr	r3, [r7, #4]
 804160c:	695b      	ldr	r3, [r3, #20]
 804160e:	2b00      	cmp	r3, #0
 8041610:	d016      	beq.n	8041640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041612:	4b15      	ldr	r3, [pc, #84]	; (8041668 <HAL_RCC_OscConfig+0x248>)
 8041614:	2201      	movs	r2, #1
 8041616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041618:	f7ff fa5e 	bl	8040ad8 <HAL_GetTick>
 804161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804161e:	e008      	b.n	8041632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041620:	f7ff fa5a 	bl	8040ad8 <HAL_GetTick>
 8041624:	4602      	mov	r2, r0
 8041626:	693b      	ldr	r3, [r7, #16]
 8041628:	1ad3      	subs	r3, r2, r3
 804162a:	2b02      	cmp	r3, #2
 804162c:	d901      	bls.n	8041632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 804162e:	2303      	movs	r3, #3
 8041630:	e173      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041632:	4b0b      	ldr	r3, [pc, #44]	; (8041660 <HAL_RCC_OscConfig+0x240>)
 8041634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041636:	f003 0302 	and.w	r3, r3, #2
 804163a:	2b00      	cmp	r3, #0
 804163c:	d0f0      	beq.n	8041620 <HAL_RCC_OscConfig+0x200>
 804163e:	e01b      	b.n	8041678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041640:	4b09      	ldr	r3, [pc, #36]	; (8041668 <HAL_RCC_OscConfig+0x248>)
 8041642:	2200      	movs	r2, #0
 8041644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041646:	f7ff fa47 	bl	8040ad8 <HAL_GetTick>
 804164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 804164c:	e00e      	b.n	804166c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804164e:	f7ff fa43 	bl	8040ad8 <HAL_GetTick>
 8041652:	4602      	mov	r2, r0
 8041654:	693b      	ldr	r3, [r7, #16]
 8041656:	1ad3      	subs	r3, r2, r3
 8041658:	2b02      	cmp	r3, #2
 804165a:	d907      	bls.n	804166c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 804165c:	2303      	movs	r3, #3
 804165e:	e15c      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
 8041660:	40023800 	.word	0x40023800
 8041664:	42470000 	.word	0x42470000
 8041668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 804166c:	4b8a      	ldr	r3, [pc, #552]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804166e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041670:	f003 0302 	and.w	r3, r3, #2
 8041674:	2b00      	cmp	r3, #0
 8041676:	d1ea      	bne.n	804164e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041678:	687b      	ldr	r3, [r7, #4]
 804167a:	681b      	ldr	r3, [r3, #0]
 804167c:	f003 0304 	and.w	r3, r3, #4
 8041680:	2b00      	cmp	r3, #0
 8041682:	f000 8097 	beq.w	80417b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041686:	2300      	movs	r3, #0
 8041688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 804168a:	4b83      	ldr	r3, [pc, #524]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041692:	2b00      	cmp	r3, #0
 8041694:	d10f      	bne.n	80416b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041696:	2300      	movs	r3, #0
 8041698:	60bb      	str	r3, [r7, #8]
 804169a:	4b7f      	ldr	r3, [pc, #508]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804169e:	4a7e      	ldr	r2, [pc, #504]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 80416a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80416a4:	6413      	str	r3, [r2, #64]	; 0x40
 80416a6:	4b7c      	ldr	r3, [pc, #496]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 80416a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80416aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80416ae:	60bb      	str	r3, [r7, #8]
 80416b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80416b2:	2301      	movs	r3, #1
 80416b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80416b6:	4b79      	ldr	r3, [pc, #484]	; (804189c <HAL_RCC_OscConfig+0x47c>)
 80416b8:	681b      	ldr	r3, [r3, #0]
 80416ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80416be:	2b00      	cmp	r3, #0
 80416c0:	d118      	bne.n	80416f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80416c2:	4b76      	ldr	r3, [pc, #472]	; (804189c <HAL_RCC_OscConfig+0x47c>)
 80416c4:	681b      	ldr	r3, [r3, #0]
 80416c6:	4a75      	ldr	r2, [pc, #468]	; (804189c <HAL_RCC_OscConfig+0x47c>)
 80416c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80416cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80416ce:	f7ff fa03 	bl	8040ad8 <HAL_GetTick>
 80416d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80416d4:	e008      	b.n	80416e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80416d6:	f7ff f9ff 	bl	8040ad8 <HAL_GetTick>
 80416da:	4602      	mov	r2, r0
 80416dc:	693b      	ldr	r3, [r7, #16]
 80416de:	1ad3      	subs	r3, r2, r3
 80416e0:	2b02      	cmp	r3, #2
 80416e2:	d901      	bls.n	80416e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80416e4:	2303      	movs	r3, #3
 80416e6:	e118      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80416e8:	4b6c      	ldr	r3, [pc, #432]	; (804189c <HAL_RCC_OscConfig+0x47c>)
 80416ea:	681b      	ldr	r3, [r3, #0]
 80416ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80416f0:	2b00      	cmp	r3, #0
 80416f2:	d0f0      	beq.n	80416d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	689b      	ldr	r3, [r3, #8]
 80416f8:	2b01      	cmp	r3, #1
 80416fa:	d106      	bne.n	804170a <HAL_RCC_OscConfig+0x2ea>
 80416fc:	4b66      	ldr	r3, [pc, #408]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 80416fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041700:	4a65      	ldr	r2, [pc, #404]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041702:	f043 0301 	orr.w	r3, r3, #1
 8041706:	6713      	str	r3, [r2, #112]	; 0x70
 8041708:	e01c      	b.n	8041744 <HAL_RCC_OscConfig+0x324>
 804170a:	687b      	ldr	r3, [r7, #4]
 804170c:	689b      	ldr	r3, [r3, #8]
 804170e:	2b05      	cmp	r3, #5
 8041710:	d10c      	bne.n	804172c <HAL_RCC_OscConfig+0x30c>
 8041712:	4b61      	ldr	r3, [pc, #388]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041716:	4a60      	ldr	r2, [pc, #384]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041718:	f043 0304 	orr.w	r3, r3, #4
 804171c:	6713      	str	r3, [r2, #112]	; 0x70
 804171e:	4b5e      	ldr	r3, [pc, #376]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041722:	4a5d      	ldr	r2, [pc, #372]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041724:	f043 0301 	orr.w	r3, r3, #1
 8041728:	6713      	str	r3, [r2, #112]	; 0x70
 804172a:	e00b      	b.n	8041744 <HAL_RCC_OscConfig+0x324>
 804172c:	4b5a      	ldr	r3, [pc, #360]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041730:	4a59      	ldr	r2, [pc, #356]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041732:	f023 0301 	bic.w	r3, r3, #1
 8041736:	6713      	str	r3, [r2, #112]	; 0x70
 8041738:	4b57      	ldr	r3, [pc, #348]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804173c:	4a56      	ldr	r2, [pc, #344]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804173e:	f023 0304 	bic.w	r3, r3, #4
 8041742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041744:	687b      	ldr	r3, [r7, #4]
 8041746:	689b      	ldr	r3, [r3, #8]
 8041748:	2b00      	cmp	r3, #0
 804174a:	d015      	beq.n	8041778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804174c:	f7ff f9c4 	bl	8040ad8 <HAL_GetTick>
 8041750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041752:	e00a      	b.n	804176a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041754:	f7ff f9c0 	bl	8040ad8 <HAL_GetTick>
 8041758:	4602      	mov	r2, r0
 804175a:	693b      	ldr	r3, [r7, #16]
 804175c:	1ad3      	subs	r3, r2, r3
 804175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8041762:	4293      	cmp	r3, r2
 8041764:	d901      	bls.n	804176a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8041766:	2303      	movs	r3, #3
 8041768:	e0d7      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804176a:	4b4b      	ldr	r3, [pc, #300]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804176e:	f003 0302 	and.w	r3, r3, #2
 8041772:	2b00      	cmp	r3, #0
 8041774:	d0ee      	beq.n	8041754 <HAL_RCC_OscConfig+0x334>
 8041776:	e014      	b.n	80417a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041778:	f7ff f9ae 	bl	8040ad8 <HAL_GetTick>
 804177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804177e:	e00a      	b.n	8041796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041780:	f7ff f9aa 	bl	8040ad8 <HAL_GetTick>
 8041784:	4602      	mov	r2, r0
 8041786:	693b      	ldr	r3, [r7, #16]
 8041788:	1ad3      	subs	r3, r2, r3
 804178a:	f241 3288 	movw	r2, #5000	; 0x1388
 804178e:	4293      	cmp	r3, r2
 8041790:	d901      	bls.n	8041796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8041792:	2303      	movs	r3, #3
 8041794:	e0c1      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041796:	4b40      	ldr	r3, [pc, #256]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804179a:	f003 0302 	and.w	r3, r3, #2
 804179e:	2b00      	cmp	r3, #0
 80417a0:	d1ee      	bne.n	8041780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80417a2:	7dfb      	ldrb	r3, [r7, #23]
 80417a4:	2b01      	cmp	r3, #1
 80417a6:	d105      	bne.n	80417b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80417a8:	4b3b      	ldr	r3, [pc, #236]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 80417aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80417ac:	4a3a      	ldr	r2, [pc, #232]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 80417ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80417b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80417b4:	687b      	ldr	r3, [r7, #4]
 80417b6:	699b      	ldr	r3, [r3, #24]
 80417b8:	2b00      	cmp	r3, #0
 80417ba:	f000 80ad 	beq.w	8041918 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80417be:	4b36      	ldr	r3, [pc, #216]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 80417c0:	689b      	ldr	r3, [r3, #8]
 80417c2:	f003 030c 	and.w	r3, r3, #12
 80417c6:	2b08      	cmp	r3, #8
 80417c8:	d060      	beq.n	804188c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80417ca:	687b      	ldr	r3, [r7, #4]
 80417cc:	699b      	ldr	r3, [r3, #24]
 80417ce:	2b02      	cmp	r3, #2
 80417d0:	d145      	bne.n	804185e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80417d2:	4b33      	ldr	r3, [pc, #204]	; (80418a0 <HAL_RCC_OscConfig+0x480>)
 80417d4:	2200      	movs	r2, #0
 80417d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80417d8:	f7ff f97e 	bl	8040ad8 <HAL_GetTick>
 80417dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80417de:	e008      	b.n	80417f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80417e0:	f7ff f97a 	bl	8040ad8 <HAL_GetTick>
 80417e4:	4602      	mov	r2, r0
 80417e6:	693b      	ldr	r3, [r7, #16]
 80417e8:	1ad3      	subs	r3, r2, r3
 80417ea:	2b02      	cmp	r3, #2
 80417ec:	d901      	bls.n	80417f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80417ee:	2303      	movs	r3, #3
 80417f0:	e093      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80417f2:	4b29      	ldr	r3, [pc, #164]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 80417f4:	681b      	ldr	r3, [r3, #0]
 80417f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80417fa:	2b00      	cmp	r3, #0
 80417fc:	d1f0      	bne.n	80417e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80417fe:	687b      	ldr	r3, [r7, #4]
 8041800:	69da      	ldr	r2, [r3, #28]
 8041802:	687b      	ldr	r3, [r7, #4]
 8041804:	6a1b      	ldr	r3, [r3, #32]
 8041806:	431a      	orrs	r2, r3
 8041808:	687b      	ldr	r3, [r7, #4]
 804180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804180c:	019b      	lsls	r3, r3, #6
 804180e:	431a      	orrs	r2, r3
 8041810:	687b      	ldr	r3, [r7, #4]
 8041812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041814:	085b      	lsrs	r3, r3, #1
 8041816:	3b01      	subs	r3, #1
 8041818:	041b      	lsls	r3, r3, #16
 804181a:	431a      	orrs	r2, r3
 804181c:	687b      	ldr	r3, [r7, #4]
 804181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041820:	061b      	lsls	r3, r3, #24
 8041822:	431a      	orrs	r2, r3
 8041824:	687b      	ldr	r3, [r7, #4]
 8041826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041828:	071b      	lsls	r3, r3, #28
 804182a:	491b      	ldr	r1, [pc, #108]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 804182c:	4313      	orrs	r3, r2
 804182e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041830:	4b1b      	ldr	r3, [pc, #108]	; (80418a0 <HAL_RCC_OscConfig+0x480>)
 8041832:	2201      	movs	r2, #1
 8041834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041836:	f7ff f94f 	bl	8040ad8 <HAL_GetTick>
 804183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804183c:	e008      	b.n	8041850 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804183e:	f7ff f94b 	bl	8040ad8 <HAL_GetTick>
 8041842:	4602      	mov	r2, r0
 8041844:	693b      	ldr	r3, [r7, #16]
 8041846:	1ad3      	subs	r3, r2, r3
 8041848:	2b02      	cmp	r3, #2
 804184a:	d901      	bls.n	8041850 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 804184c:	2303      	movs	r3, #3
 804184e:	e064      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041850:	4b11      	ldr	r3, [pc, #68]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041852:	681b      	ldr	r3, [r3, #0]
 8041854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041858:	2b00      	cmp	r3, #0
 804185a:	d0f0      	beq.n	804183e <HAL_RCC_OscConfig+0x41e>
 804185c:	e05c      	b.n	8041918 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804185e:	4b10      	ldr	r3, [pc, #64]	; (80418a0 <HAL_RCC_OscConfig+0x480>)
 8041860:	2200      	movs	r2, #0
 8041862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041864:	f7ff f938 	bl	8040ad8 <HAL_GetTick>
 8041868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804186a:	e008      	b.n	804187e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804186c:	f7ff f934 	bl	8040ad8 <HAL_GetTick>
 8041870:	4602      	mov	r2, r0
 8041872:	693b      	ldr	r3, [r7, #16]
 8041874:	1ad3      	subs	r3, r2, r3
 8041876:	2b02      	cmp	r3, #2
 8041878:	d901      	bls.n	804187e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 804187a:	2303      	movs	r3, #3
 804187c:	e04d      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804187e:	4b06      	ldr	r3, [pc, #24]	; (8041898 <HAL_RCC_OscConfig+0x478>)
 8041880:	681b      	ldr	r3, [r3, #0]
 8041882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041886:	2b00      	cmp	r3, #0
 8041888:	d1f0      	bne.n	804186c <HAL_RCC_OscConfig+0x44c>
 804188a:	e045      	b.n	8041918 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 804188c:	687b      	ldr	r3, [r7, #4]
 804188e:	699b      	ldr	r3, [r3, #24]
 8041890:	2b01      	cmp	r3, #1
 8041892:	d107      	bne.n	80418a4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8041894:	2301      	movs	r3, #1
 8041896:	e040      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
 8041898:	40023800 	.word	0x40023800
 804189c:	40007000 	.word	0x40007000
 80418a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80418a4:	4b1f      	ldr	r3, [pc, #124]	; (8041924 <HAL_RCC_OscConfig+0x504>)
 80418a6:	685b      	ldr	r3, [r3, #4]
 80418a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80418aa:	687b      	ldr	r3, [r7, #4]
 80418ac:	699b      	ldr	r3, [r3, #24]
 80418ae:	2b01      	cmp	r3, #1
 80418b0:	d030      	beq.n	8041914 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80418b2:	68fb      	ldr	r3, [r7, #12]
 80418b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80418b8:	687b      	ldr	r3, [r7, #4]
 80418ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80418bc:	429a      	cmp	r2, r3
 80418be:	d129      	bne.n	8041914 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80418c0:	68fb      	ldr	r3, [r7, #12]
 80418c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80418c6:	687b      	ldr	r3, [r7, #4]
 80418c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80418ca:	429a      	cmp	r2, r3
 80418cc:	d122      	bne.n	8041914 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80418ce:	68fa      	ldr	r2, [r7, #12]
 80418d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80418d4:	4013      	ands	r3, r2
 80418d6:	687a      	ldr	r2, [r7, #4]
 80418d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80418da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80418dc:	4293      	cmp	r3, r2
 80418de:	d119      	bne.n	8041914 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80418e0:	68fb      	ldr	r3, [r7, #12]
 80418e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80418e6:	687b      	ldr	r3, [r7, #4]
 80418e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80418ea:	085b      	lsrs	r3, r3, #1
 80418ec:	3b01      	subs	r3, #1
 80418ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80418f0:	429a      	cmp	r2, r3
 80418f2:	d10f      	bne.n	8041914 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80418f4:	68fb      	ldr	r3, [r7, #12]
 80418f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80418fa:	687b      	ldr	r3, [r7, #4]
 80418fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80418fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8041900:	429a      	cmp	r2, r3
 8041902:	d107      	bne.n	8041914 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8041904:	68fb      	ldr	r3, [r7, #12]
 8041906:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 804190a:	687b      	ldr	r3, [r7, #4]
 804190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804190e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041910:	429a      	cmp	r2, r3
 8041912:	d001      	beq.n	8041918 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8041914:	2301      	movs	r3, #1
 8041916:	e000      	b.n	804191a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8041918:	2300      	movs	r3, #0
}
 804191a:	4618      	mov	r0, r3
 804191c:	3718      	adds	r7, #24
 804191e:	46bd      	mov	sp, r7
 8041920:	bd80      	pop	{r7, pc}
 8041922:	bf00      	nop
 8041924:	40023800 	.word	0x40023800

08041928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8041928:	b580      	push	{r7, lr}
 804192a:	b082      	sub	sp, #8
 804192c:	af00      	add	r7, sp, #0
 804192e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8041930:	687b      	ldr	r3, [r7, #4]
 8041932:	2b00      	cmp	r3, #0
 8041934:	d101      	bne.n	804193a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8041936:	2301      	movs	r3, #1
 8041938:	e03f      	b.n	80419ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 804193a:	687b      	ldr	r3, [r7, #4]
 804193c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041940:	b2db      	uxtb	r3, r3
 8041942:	2b00      	cmp	r3, #0
 8041944:	d106      	bne.n	8041954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8041946:	687b      	ldr	r3, [r7, #4]
 8041948:	2200      	movs	r2, #0
 804194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804194e:	6878      	ldr	r0, [r7, #4]
 8041950:	f7fe ff74 	bl	804083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8041954:	687b      	ldr	r3, [r7, #4]
 8041956:	2224      	movs	r2, #36	; 0x24
 8041958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 804195c:	687b      	ldr	r3, [r7, #4]
 804195e:	681b      	ldr	r3, [r3, #0]
 8041960:	68da      	ldr	r2, [r3, #12]
 8041962:	687b      	ldr	r3, [r7, #4]
 8041964:	681b      	ldr	r3, [r3, #0]
 8041966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804196a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 804196c:	6878      	ldr	r0, [r7, #4]
 804196e:	f000 f929 	bl	8041bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8041972:	687b      	ldr	r3, [r7, #4]
 8041974:	681b      	ldr	r3, [r3, #0]
 8041976:	691a      	ldr	r2, [r3, #16]
 8041978:	687b      	ldr	r3, [r7, #4]
 804197a:	681b      	ldr	r3, [r3, #0]
 804197c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8041980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8041982:	687b      	ldr	r3, [r7, #4]
 8041984:	681b      	ldr	r3, [r3, #0]
 8041986:	695a      	ldr	r2, [r3, #20]
 8041988:	687b      	ldr	r3, [r7, #4]
 804198a:	681b      	ldr	r3, [r3, #0]
 804198c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8041990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8041992:	687b      	ldr	r3, [r7, #4]
 8041994:	681b      	ldr	r3, [r3, #0]
 8041996:	68da      	ldr	r2, [r3, #12]
 8041998:	687b      	ldr	r3, [r7, #4]
 804199a:	681b      	ldr	r3, [r3, #0]
 804199c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80419a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80419a2:	687b      	ldr	r3, [r7, #4]
 80419a4:	2200      	movs	r2, #0
 80419a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80419a8:	687b      	ldr	r3, [r7, #4]
 80419aa:	2220      	movs	r2, #32
 80419ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80419b0:	687b      	ldr	r3, [r7, #4]
 80419b2:	2220      	movs	r2, #32
 80419b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80419b8:	2300      	movs	r3, #0
}
 80419ba:	4618      	mov	r0, r3
 80419bc:	3708      	adds	r7, #8
 80419be:	46bd      	mov	sp, r7
 80419c0:	bd80      	pop	{r7, pc}

080419c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80419c2:	b580      	push	{r7, lr}
 80419c4:	b08a      	sub	sp, #40	; 0x28
 80419c6:	af02      	add	r7, sp, #8
 80419c8:	60f8      	str	r0, [r7, #12]
 80419ca:	60b9      	str	r1, [r7, #8]
 80419cc:	603b      	str	r3, [r7, #0]
 80419ce:	4613      	mov	r3, r2
 80419d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80419d2:	2300      	movs	r3, #0
 80419d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80419d6:	68fb      	ldr	r3, [r7, #12]
 80419d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80419dc:	b2db      	uxtb	r3, r3
 80419de:	2b20      	cmp	r3, #32
 80419e0:	d17c      	bne.n	8041adc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80419e2:	68bb      	ldr	r3, [r7, #8]
 80419e4:	2b00      	cmp	r3, #0
 80419e6:	d002      	beq.n	80419ee <HAL_UART_Transmit+0x2c>
 80419e8:	88fb      	ldrh	r3, [r7, #6]
 80419ea:	2b00      	cmp	r3, #0
 80419ec:	d101      	bne.n	80419f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80419ee:	2301      	movs	r3, #1
 80419f0:	e075      	b.n	8041ade <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80419f2:	68fb      	ldr	r3, [r7, #12]
 80419f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80419f8:	2b01      	cmp	r3, #1
 80419fa:	d101      	bne.n	8041a00 <HAL_UART_Transmit+0x3e>
 80419fc:	2302      	movs	r3, #2
 80419fe:	e06e      	b.n	8041ade <HAL_UART_Transmit+0x11c>
 8041a00:	68fb      	ldr	r3, [r7, #12]
 8041a02:	2201      	movs	r2, #1
 8041a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8041a08:	68fb      	ldr	r3, [r7, #12]
 8041a0a:	2200      	movs	r2, #0
 8041a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8041a0e:	68fb      	ldr	r3, [r7, #12]
 8041a10:	2221      	movs	r2, #33	; 0x21
 8041a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8041a16:	f7ff f85f 	bl	8040ad8 <HAL_GetTick>
 8041a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8041a1c:	68fb      	ldr	r3, [r7, #12]
 8041a1e:	88fa      	ldrh	r2, [r7, #6]
 8041a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8041a22:	68fb      	ldr	r3, [r7, #12]
 8041a24:	88fa      	ldrh	r2, [r7, #6]
 8041a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8041a28:	68fb      	ldr	r3, [r7, #12]
 8041a2a:	689b      	ldr	r3, [r3, #8]
 8041a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041a30:	d108      	bne.n	8041a44 <HAL_UART_Transmit+0x82>
 8041a32:	68fb      	ldr	r3, [r7, #12]
 8041a34:	691b      	ldr	r3, [r3, #16]
 8041a36:	2b00      	cmp	r3, #0
 8041a38:	d104      	bne.n	8041a44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8041a3a:	2300      	movs	r3, #0
 8041a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8041a3e:	68bb      	ldr	r3, [r7, #8]
 8041a40:	61bb      	str	r3, [r7, #24]
 8041a42:	e003      	b.n	8041a4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8041a44:	68bb      	ldr	r3, [r7, #8]
 8041a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8041a48:	2300      	movs	r3, #0
 8041a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8041a4c:	68fb      	ldr	r3, [r7, #12]
 8041a4e:	2200      	movs	r2, #0
 8041a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8041a54:	e02a      	b.n	8041aac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8041a56:	683b      	ldr	r3, [r7, #0]
 8041a58:	9300      	str	r3, [sp, #0]
 8041a5a:	697b      	ldr	r3, [r7, #20]
 8041a5c:	2200      	movs	r2, #0
 8041a5e:	2180      	movs	r1, #128	; 0x80
 8041a60:	68f8      	ldr	r0, [r7, #12]
 8041a62:	f000 f840 	bl	8041ae6 <UART_WaitOnFlagUntilTimeout>
 8041a66:	4603      	mov	r3, r0
 8041a68:	2b00      	cmp	r3, #0
 8041a6a:	d001      	beq.n	8041a70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8041a6c:	2303      	movs	r3, #3
 8041a6e:	e036      	b.n	8041ade <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8041a70:	69fb      	ldr	r3, [r7, #28]
 8041a72:	2b00      	cmp	r3, #0
 8041a74:	d10b      	bne.n	8041a8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8041a76:	69bb      	ldr	r3, [r7, #24]
 8041a78:	881b      	ldrh	r3, [r3, #0]
 8041a7a:	461a      	mov	r2, r3
 8041a7c:	68fb      	ldr	r3, [r7, #12]
 8041a7e:	681b      	ldr	r3, [r3, #0]
 8041a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8041a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8041a86:	69bb      	ldr	r3, [r7, #24]
 8041a88:	3302      	adds	r3, #2
 8041a8a:	61bb      	str	r3, [r7, #24]
 8041a8c:	e007      	b.n	8041a9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8041a8e:	69fb      	ldr	r3, [r7, #28]
 8041a90:	781a      	ldrb	r2, [r3, #0]
 8041a92:	68fb      	ldr	r3, [r7, #12]
 8041a94:	681b      	ldr	r3, [r3, #0]
 8041a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8041a98:	69fb      	ldr	r3, [r7, #28]
 8041a9a:	3301      	adds	r3, #1
 8041a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8041a9e:	68fb      	ldr	r3, [r7, #12]
 8041aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8041aa2:	b29b      	uxth	r3, r3
 8041aa4:	3b01      	subs	r3, #1
 8041aa6:	b29a      	uxth	r2, r3
 8041aa8:	68fb      	ldr	r3, [r7, #12]
 8041aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8041aac:	68fb      	ldr	r3, [r7, #12]
 8041aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8041ab0:	b29b      	uxth	r3, r3
 8041ab2:	2b00      	cmp	r3, #0
 8041ab4:	d1cf      	bne.n	8041a56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8041ab6:	683b      	ldr	r3, [r7, #0]
 8041ab8:	9300      	str	r3, [sp, #0]
 8041aba:	697b      	ldr	r3, [r7, #20]
 8041abc:	2200      	movs	r2, #0
 8041abe:	2140      	movs	r1, #64	; 0x40
 8041ac0:	68f8      	ldr	r0, [r7, #12]
 8041ac2:	f000 f810 	bl	8041ae6 <UART_WaitOnFlagUntilTimeout>
 8041ac6:	4603      	mov	r3, r0
 8041ac8:	2b00      	cmp	r3, #0
 8041aca:	d001      	beq.n	8041ad0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8041acc:	2303      	movs	r3, #3
 8041ace:	e006      	b.n	8041ade <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8041ad0:	68fb      	ldr	r3, [r7, #12]
 8041ad2:	2220      	movs	r2, #32
 8041ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8041ad8:	2300      	movs	r3, #0
 8041ada:	e000      	b.n	8041ade <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8041adc:	2302      	movs	r3, #2
  }
}
 8041ade:	4618      	mov	r0, r3
 8041ae0:	3720      	adds	r7, #32
 8041ae2:	46bd      	mov	sp, r7
 8041ae4:	bd80      	pop	{r7, pc}

08041ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8041ae6:	b580      	push	{r7, lr}
 8041ae8:	b090      	sub	sp, #64	; 0x40
 8041aea:	af00      	add	r7, sp, #0
 8041aec:	60f8      	str	r0, [r7, #12]
 8041aee:	60b9      	str	r1, [r7, #8]
 8041af0:	603b      	str	r3, [r7, #0]
 8041af2:	4613      	mov	r3, r2
 8041af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8041af6:	e050      	b.n	8041b9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8041af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8041afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8041afe:	d04c      	beq.n	8041b9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8041b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8041b02:	2b00      	cmp	r3, #0
 8041b04:	d007      	beq.n	8041b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8041b06:	f7fe ffe7 	bl	8040ad8 <HAL_GetTick>
 8041b0a:	4602      	mov	r2, r0
 8041b0c:	683b      	ldr	r3, [r7, #0]
 8041b0e:	1ad3      	subs	r3, r2, r3
 8041b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8041b12:	429a      	cmp	r2, r3
 8041b14:	d241      	bcs.n	8041b9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8041b16:	68fb      	ldr	r3, [r7, #12]
 8041b18:	681b      	ldr	r3, [r3, #0]
 8041b1a:	330c      	adds	r3, #12
 8041b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8041b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041b20:	e853 3f00 	ldrex	r3, [r3]
 8041b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8041b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8041b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8041b2e:	68fb      	ldr	r3, [r7, #12]
 8041b30:	681b      	ldr	r3, [r3, #0]
 8041b32:	330c      	adds	r3, #12
 8041b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8041b36:	637a      	str	r2, [r7, #52]	; 0x34
 8041b38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8041b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8041b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8041b3e:	e841 2300 	strex	r3, r2, [r1]
 8041b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8041b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041b46:	2b00      	cmp	r3, #0
 8041b48:	d1e5      	bne.n	8041b16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8041b4a:	68fb      	ldr	r3, [r7, #12]
 8041b4c:	681b      	ldr	r3, [r3, #0]
 8041b4e:	3314      	adds	r3, #20
 8041b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8041b52:	697b      	ldr	r3, [r7, #20]
 8041b54:	e853 3f00 	ldrex	r3, [r3]
 8041b58:	613b      	str	r3, [r7, #16]
   return(result);
 8041b5a:	693b      	ldr	r3, [r7, #16]
 8041b5c:	f023 0301 	bic.w	r3, r3, #1
 8041b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8041b62:	68fb      	ldr	r3, [r7, #12]
 8041b64:	681b      	ldr	r3, [r3, #0]
 8041b66:	3314      	adds	r3, #20
 8041b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8041b6a:	623a      	str	r2, [r7, #32]
 8041b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8041b6e:	69f9      	ldr	r1, [r7, #28]
 8041b70:	6a3a      	ldr	r2, [r7, #32]
 8041b72:	e841 2300 	strex	r3, r2, [r1]
 8041b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8041b78:	69bb      	ldr	r3, [r7, #24]
 8041b7a:	2b00      	cmp	r3, #0
 8041b7c:	d1e5      	bne.n	8041b4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8041b7e:	68fb      	ldr	r3, [r7, #12]
 8041b80:	2220      	movs	r2, #32
 8041b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8041b86:	68fb      	ldr	r3, [r7, #12]
 8041b88:	2220      	movs	r2, #32
 8041b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8041b8e:	68fb      	ldr	r3, [r7, #12]
 8041b90:	2200      	movs	r2, #0
 8041b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8041b96:	2303      	movs	r3, #3
 8041b98:	e00f      	b.n	8041bba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8041b9a:	68fb      	ldr	r3, [r7, #12]
 8041b9c:	681b      	ldr	r3, [r3, #0]
 8041b9e:	681a      	ldr	r2, [r3, #0]
 8041ba0:	68bb      	ldr	r3, [r7, #8]
 8041ba2:	4013      	ands	r3, r2
 8041ba4:	68ba      	ldr	r2, [r7, #8]
 8041ba6:	429a      	cmp	r2, r3
 8041ba8:	bf0c      	ite	eq
 8041baa:	2301      	moveq	r3, #1
 8041bac:	2300      	movne	r3, #0
 8041bae:	b2db      	uxtb	r3, r3
 8041bb0:	461a      	mov	r2, r3
 8041bb2:	79fb      	ldrb	r3, [r7, #7]
 8041bb4:	429a      	cmp	r2, r3
 8041bb6:	d09f      	beq.n	8041af8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8041bb8:	2300      	movs	r3, #0
}
 8041bba:	4618      	mov	r0, r3
 8041bbc:	3740      	adds	r7, #64	; 0x40
 8041bbe:	46bd      	mov	sp, r7
 8041bc0:	bd80      	pop	{r7, pc}
	...

08041bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8041bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8041bc8:	b0c0      	sub	sp, #256	; 0x100
 8041bca:	af00      	add	r7, sp, #0
 8041bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8041bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041bd4:	681b      	ldr	r3, [r3, #0]
 8041bd6:	691b      	ldr	r3, [r3, #16]
 8041bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8041bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041be0:	68d9      	ldr	r1, [r3, #12]
 8041be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041be6:	681a      	ldr	r2, [r3, #0]
 8041be8:	ea40 0301 	orr.w	r3, r0, r1
 8041bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8041bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041bf2:	689a      	ldr	r2, [r3, #8]
 8041bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041bf8:	691b      	ldr	r3, [r3, #16]
 8041bfa:	431a      	orrs	r2, r3
 8041bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c00:	695b      	ldr	r3, [r3, #20]
 8041c02:	431a      	orrs	r2, r3
 8041c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c08:	69db      	ldr	r3, [r3, #28]
 8041c0a:	4313      	orrs	r3, r2
 8041c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8041c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c14:	681b      	ldr	r3, [r3, #0]
 8041c16:	68db      	ldr	r3, [r3, #12]
 8041c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8041c1c:	f021 010c 	bic.w	r1, r1, #12
 8041c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c24:	681a      	ldr	r2, [r3, #0]
 8041c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8041c2a:	430b      	orrs	r3, r1
 8041c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8041c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c32:	681b      	ldr	r3, [r3, #0]
 8041c34:	695b      	ldr	r3, [r3, #20]
 8041c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8041c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c3e:	6999      	ldr	r1, [r3, #24]
 8041c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c44:	681a      	ldr	r2, [r3, #0]
 8041c46:	ea40 0301 	orr.w	r3, r0, r1
 8041c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8041c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c50:	681a      	ldr	r2, [r3, #0]
 8041c52:	4b8f      	ldr	r3, [pc, #572]	; (8041e90 <UART_SetConfig+0x2cc>)
 8041c54:	429a      	cmp	r2, r3
 8041c56:	d005      	beq.n	8041c64 <UART_SetConfig+0xa0>
 8041c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c5c:	681a      	ldr	r2, [r3, #0]
 8041c5e:	4b8d      	ldr	r3, [pc, #564]	; (8041e94 <UART_SetConfig+0x2d0>)
 8041c60:	429a      	cmp	r2, r3
 8041c62:	d104      	bne.n	8041c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8041c64:	f7ff fbc8 	bl	80413f8 <HAL_RCC_GetPCLK2Freq>
 8041c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8041c6c:	e003      	b.n	8041c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8041c6e:	f7ff fbaf 	bl	80413d0 <HAL_RCC_GetPCLK1Freq>
 8041c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8041c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c7a:	69db      	ldr	r3, [r3, #28]
 8041c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8041c80:	f040 810c 	bne.w	8041e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8041c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041c88:	2200      	movs	r2, #0
 8041c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8041c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8041c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8041c96:	4622      	mov	r2, r4
 8041c98:	462b      	mov	r3, r5
 8041c9a:	1891      	adds	r1, r2, r2
 8041c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8041c9e:	415b      	adcs	r3, r3
 8041ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8041ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8041ca6:	4621      	mov	r1, r4
 8041ca8:	eb12 0801 	adds.w	r8, r2, r1
 8041cac:	4629      	mov	r1, r5
 8041cae:	eb43 0901 	adc.w	r9, r3, r1
 8041cb2:	f04f 0200 	mov.w	r2, #0
 8041cb6:	f04f 0300 	mov.w	r3, #0
 8041cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8041cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8041cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8041cc6:	4690      	mov	r8, r2
 8041cc8:	4699      	mov	r9, r3
 8041cca:	4623      	mov	r3, r4
 8041ccc:	eb18 0303 	adds.w	r3, r8, r3
 8041cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8041cd4:	462b      	mov	r3, r5
 8041cd6:	eb49 0303 	adc.w	r3, r9, r3
 8041cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8041cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041ce2:	685b      	ldr	r3, [r3, #4]
 8041ce4:	2200      	movs	r2, #0
 8041ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8041cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8041cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8041cf2:	460b      	mov	r3, r1
 8041cf4:	18db      	adds	r3, r3, r3
 8041cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8041cf8:	4613      	mov	r3, r2
 8041cfa:	eb42 0303 	adc.w	r3, r2, r3
 8041cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8041d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8041d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8041d08:	f7fe fada 	bl	80402c0 <__aeabi_uldivmod>
 8041d0c:	4602      	mov	r2, r0
 8041d0e:	460b      	mov	r3, r1
 8041d10:	4b61      	ldr	r3, [pc, #388]	; (8041e98 <UART_SetConfig+0x2d4>)
 8041d12:	fba3 2302 	umull	r2, r3, r3, r2
 8041d16:	095b      	lsrs	r3, r3, #5
 8041d18:	011c      	lsls	r4, r3, #4
 8041d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041d1e:	2200      	movs	r2, #0
 8041d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8041d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8041d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8041d2c:	4642      	mov	r2, r8
 8041d2e:	464b      	mov	r3, r9
 8041d30:	1891      	adds	r1, r2, r2
 8041d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8041d34:	415b      	adcs	r3, r3
 8041d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8041d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8041d3c:	4641      	mov	r1, r8
 8041d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8041d42:	4649      	mov	r1, r9
 8041d44:	eb43 0b01 	adc.w	fp, r3, r1
 8041d48:	f04f 0200 	mov.w	r2, #0
 8041d4c:	f04f 0300 	mov.w	r3, #0
 8041d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8041d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8041d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8041d5c:	4692      	mov	sl, r2
 8041d5e:	469b      	mov	fp, r3
 8041d60:	4643      	mov	r3, r8
 8041d62:	eb1a 0303 	adds.w	r3, sl, r3
 8041d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8041d6a:	464b      	mov	r3, r9
 8041d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8041d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8041d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041d78:	685b      	ldr	r3, [r3, #4]
 8041d7a:	2200      	movs	r2, #0
 8041d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8041d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8041d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8041d88:	460b      	mov	r3, r1
 8041d8a:	18db      	adds	r3, r3, r3
 8041d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8041d8e:	4613      	mov	r3, r2
 8041d90:	eb42 0303 	adc.w	r3, r2, r3
 8041d94:	647b      	str	r3, [r7, #68]	; 0x44
 8041d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8041d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8041d9e:	f7fe fa8f 	bl	80402c0 <__aeabi_uldivmod>
 8041da2:	4602      	mov	r2, r0
 8041da4:	460b      	mov	r3, r1
 8041da6:	4611      	mov	r1, r2
 8041da8:	4b3b      	ldr	r3, [pc, #236]	; (8041e98 <UART_SetConfig+0x2d4>)
 8041daa:	fba3 2301 	umull	r2, r3, r3, r1
 8041dae:	095b      	lsrs	r3, r3, #5
 8041db0:	2264      	movs	r2, #100	; 0x64
 8041db2:	fb02 f303 	mul.w	r3, r2, r3
 8041db6:	1acb      	subs	r3, r1, r3
 8041db8:	00db      	lsls	r3, r3, #3
 8041dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8041dbe:	4b36      	ldr	r3, [pc, #216]	; (8041e98 <UART_SetConfig+0x2d4>)
 8041dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8041dc4:	095b      	lsrs	r3, r3, #5
 8041dc6:	005b      	lsls	r3, r3, #1
 8041dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8041dcc:	441c      	add	r4, r3
 8041dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041dd2:	2200      	movs	r2, #0
 8041dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8041dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8041ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8041de0:	4642      	mov	r2, r8
 8041de2:	464b      	mov	r3, r9
 8041de4:	1891      	adds	r1, r2, r2
 8041de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8041de8:	415b      	adcs	r3, r3
 8041dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8041dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8041df0:	4641      	mov	r1, r8
 8041df2:	1851      	adds	r1, r2, r1
 8041df4:	6339      	str	r1, [r7, #48]	; 0x30
 8041df6:	4649      	mov	r1, r9
 8041df8:	414b      	adcs	r3, r1
 8041dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8041dfc:	f04f 0200 	mov.w	r2, #0
 8041e00:	f04f 0300 	mov.w	r3, #0
 8041e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8041e08:	4659      	mov	r1, fp
 8041e0a:	00cb      	lsls	r3, r1, #3
 8041e0c:	4651      	mov	r1, sl
 8041e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8041e12:	4651      	mov	r1, sl
 8041e14:	00ca      	lsls	r2, r1, #3
 8041e16:	4610      	mov	r0, r2
 8041e18:	4619      	mov	r1, r3
 8041e1a:	4603      	mov	r3, r0
 8041e1c:	4642      	mov	r2, r8
 8041e1e:	189b      	adds	r3, r3, r2
 8041e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8041e24:	464b      	mov	r3, r9
 8041e26:	460a      	mov	r2, r1
 8041e28:	eb42 0303 	adc.w	r3, r2, r3
 8041e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8041e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041e34:	685b      	ldr	r3, [r3, #4]
 8041e36:	2200      	movs	r2, #0
 8041e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8041e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8041e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8041e44:	460b      	mov	r3, r1
 8041e46:	18db      	adds	r3, r3, r3
 8041e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8041e4a:	4613      	mov	r3, r2
 8041e4c:	eb42 0303 	adc.w	r3, r2, r3
 8041e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8041e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8041e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8041e5a:	f7fe fa31 	bl	80402c0 <__aeabi_uldivmod>
 8041e5e:	4602      	mov	r2, r0
 8041e60:	460b      	mov	r3, r1
 8041e62:	4b0d      	ldr	r3, [pc, #52]	; (8041e98 <UART_SetConfig+0x2d4>)
 8041e64:	fba3 1302 	umull	r1, r3, r3, r2
 8041e68:	095b      	lsrs	r3, r3, #5
 8041e6a:	2164      	movs	r1, #100	; 0x64
 8041e6c:	fb01 f303 	mul.w	r3, r1, r3
 8041e70:	1ad3      	subs	r3, r2, r3
 8041e72:	00db      	lsls	r3, r3, #3
 8041e74:	3332      	adds	r3, #50	; 0x32
 8041e76:	4a08      	ldr	r2, [pc, #32]	; (8041e98 <UART_SetConfig+0x2d4>)
 8041e78:	fba2 2303 	umull	r2, r3, r2, r3
 8041e7c:	095b      	lsrs	r3, r3, #5
 8041e7e:	f003 0207 	and.w	r2, r3, #7
 8041e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041e86:	681b      	ldr	r3, [r3, #0]
 8041e88:	4422      	add	r2, r4
 8041e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8041e8c:	e105      	b.n	804209a <UART_SetConfig+0x4d6>
 8041e8e:	bf00      	nop
 8041e90:	40011000 	.word	0x40011000
 8041e94:	40011400 	.word	0x40011400
 8041e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8041e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041ea0:	2200      	movs	r2, #0
 8041ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8041ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8041eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8041eae:	4642      	mov	r2, r8
 8041eb0:	464b      	mov	r3, r9
 8041eb2:	1891      	adds	r1, r2, r2
 8041eb4:	6239      	str	r1, [r7, #32]
 8041eb6:	415b      	adcs	r3, r3
 8041eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8041eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8041ebe:	4641      	mov	r1, r8
 8041ec0:	1854      	adds	r4, r2, r1
 8041ec2:	4649      	mov	r1, r9
 8041ec4:	eb43 0501 	adc.w	r5, r3, r1
 8041ec8:	f04f 0200 	mov.w	r2, #0
 8041ecc:	f04f 0300 	mov.w	r3, #0
 8041ed0:	00eb      	lsls	r3, r5, #3
 8041ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8041ed6:	00e2      	lsls	r2, r4, #3
 8041ed8:	4614      	mov	r4, r2
 8041eda:	461d      	mov	r5, r3
 8041edc:	4643      	mov	r3, r8
 8041ede:	18e3      	adds	r3, r4, r3
 8041ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8041ee4:	464b      	mov	r3, r9
 8041ee6:	eb45 0303 	adc.w	r3, r5, r3
 8041eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8041eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041ef2:	685b      	ldr	r3, [r3, #4]
 8041ef4:	2200      	movs	r2, #0
 8041ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8041efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8041efe:	f04f 0200 	mov.w	r2, #0
 8041f02:	f04f 0300 	mov.w	r3, #0
 8041f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8041f0a:	4629      	mov	r1, r5
 8041f0c:	008b      	lsls	r3, r1, #2
 8041f0e:	4621      	mov	r1, r4
 8041f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8041f14:	4621      	mov	r1, r4
 8041f16:	008a      	lsls	r2, r1, #2
 8041f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8041f1c:	f7fe f9d0 	bl	80402c0 <__aeabi_uldivmod>
 8041f20:	4602      	mov	r2, r0
 8041f22:	460b      	mov	r3, r1
 8041f24:	4b60      	ldr	r3, [pc, #384]	; (80420a8 <UART_SetConfig+0x4e4>)
 8041f26:	fba3 2302 	umull	r2, r3, r3, r2
 8041f2a:	095b      	lsrs	r3, r3, #5
 8041f2c:	011c      	lsls	r4, r3, #4
 8041f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041f32:	2200      	movs	r2, #0
 8041f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8041f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8041f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8041f40:	4642      	mov	r2, r8
 8041f42:	464b      	mov	r3, r9
 8041f44:	1891      	adds	r1, r2, r2
 8041f46:	61b9      	str	r1, [r7, #24]
 8041f48:	415b      	adcs	r3, r3
 8041f4a:	61fb      	str	r3, [r7, #28]
 8041f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8041f50:	4641      	mov	r1, r8
 8041f52:	1851      	adds	r1, r2, r1
 8041f54:	6139      	str	r1, [r7, #16]
 8041f56:	4649      	mov	r1, r9
 8041f58:	414b      	adcs	r3, r1
 8041f5a:	617b      	str	r3, [r7, #20]
 8041f5c:	f04f 0200 	mov.w	r2, #0
 8041f60:	f04f 0300 	mov.w	r3, #0
 8041f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8041f68:	4659      	mov	r1, fp
 8041f6a:	00cb      	lsls	r3, r1, #3
 8041f6c:	4651      	mov	r1, sl
 8041f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8041f72:	4651      	mov	r1, sl
 8041f74:	00ca      	lsls	r2, r1, #3
 8041f76:	4610      	mov	r0, r2
 8041f78:	4619      	mov	r1, r3
 8041f7a:	4603      	mov	r3, r0
 8041f7c:	4642      	mov	r2, r8
 8041f7e:	189b      	adds	r3, r3, r2
 8041f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8041f84:	464b      	mov	r3, r9
 8041f86:	460a      	mov	r2, r1
 8041f88:	eb42 0303 	adc.w	r3, r2, r3
 8041f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8041f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041f94:	685b      	ldr	r3, [r3, #4]
 8041f96:	2200      	movs	r2, #0
 8041f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8041f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8041f9c:	f04f 0200 	mov.w	r2, #0
 8041fa0:	f04f 0300 	mov.w	r3, #0
 8041fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8041fa8:	4649      	mov	r1, r9
 8041faa:	008b      	lsls	r3, r1, #2
 8041fac:	4641      	mov	r1, r8
 8041fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8041fb2:	4641      	mov	r1, r8
 8041fb4:	008a      	lsls	r2, r1, #2
 8041fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8041fba:	f7fe f981 	bl	80402c0 <__aeabi_uldivmod>
 8041fbe:	4602      	mov	r2, r0
 8041fc0:	460b      	mov	r3, r1
 8041fc2:	4b39      	ldr	r3, [pc, #228]	; (80420a8 <UART_SetConfig+0x4e4>)
 8041fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8041fc8:	095b      	lsrs	r3, r3, #5
 8041fca:	2164      	movs	r1, #100	; 0x64
 8041fcc:	fb01 f303 	mul.w	r3, r1, r3
 8041fd0:	1ad3      	subs	r3, r2, r3
 8041fd2:	011b      	lsls	r3, r3, #4
 8041fd4:	3332      	adds	r3, #50	; 0x32
 8041fd6:	4a34      	ldr	r2, [pc, #208]	; (80420a8 <UART_SetConfig+0x4e4>)
 8041fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8041fdc:	095b      	lsrs	r3, r3, #5
 8041fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041fe2:	441c      	add	r4, r3
 8041fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041fe8:	2200      	movs	r2, #0
 8041fea:	673b      	str	r3, [r7, #112]	; 0x70
 8041fec:	677a      	str	r2, [r7, #116]	; 0x74
 8041fee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8041ff2:	4642      	mov	r2, r8
 8041ff4:	464b      	mov	r3, r9
 8041ff6:	1891      	adds	r1, r2, r2
 8041ff8:	60b9      	str	r1, [r7, #8]
 8041ffa:	415b      	adcs	r3, r3
 8041ffc:	60fb      	str	r3, [r7, #12]
 8041ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8042002:	4641      	mov	r1, r8
 8042004:	1851      	adds	r1, r2, r1
 8042006:	6039      	str	r1, [r7, #0]
 8042008:	4649      	mov	r1, r9
 804200a:	414b      	adcs	r3, r1
 804200c:	607b      	str	r3, [r7, #4]
 804200e:	f04f 0200 	mov.w	r2, #0
 8042012:	f04f 0300 	mov.w	r3, #0
 8042016:	e9d7 ab00 	ldrd	sl, fp, [r7]
 804201a:	4659      	mov	r1, fp
 804201c:	00cb      	lsls	r3, r1, #3
 804201e:	4651      	mov	r1, sl
 8042020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8042024:	4651      	mov	r1, sl
 8042026:	00ca      	lsls	r2, r1, #3
 8042028:	4610      	mov	r0, r2
 804202a:	4619      	mov	r1, r3
 804202c:	4603      	mov	r3, r0
 804202e:	4642      	mov	r2, r8
 8042030:	189b      	adds	r3, r3, r2
 8042032:	66bb      	str	r3, [r7, #104]	; 0x68
 8042034:	464b      	mov	r3, r9
 8042036:	460a      	mov	r2, r1
 8042038:	eb42 0303 	adc.w	r3, r2, r3
 804203c:	66fb      	str	r3, [r7, #108]	; 0x6c
 804203e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042042:	685b      	ldr	r3, [r3, #4]
 8042044:	2200      	movs	r2, #0
 8042046:	663b      	str	r3, [r7, #96]	; 0x60
 8042048:	667a      	str	r2, [r7, #100]	; 0x64
 804204a:	f04f 0200 	mov.w	r2, #0
 804204e:	f04f 0300 	mov.w	r3, #0
 8042052:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8042056:	4649      	mov	r1, r9
 8042058:	008b      	lsls	r3, r1, #2
 804205a:	4641      	mov	r1, r8
 804205c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8042060:	4641      	mov	r1, r8
 8042062:	008a      	lsls	r2, r1, #2
 8042064:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8042068:	f7fe f92a 	bl	80402c0 <__aeabi_uldivmod>
 804206c:	4602      	mov	r2, r0
 804206e:	460b      	mov	r3, r1
 8042070:	4b0d      	ldr	r3, [pc, #52]	; (80420a8 <UART_SetConfig+0x4e4>)
 8042072:	fba3 1302 	umull	r1, r3, r3, r2
 8042076:	095b      	lsrs	r3, r3, #5
 8042078:	2164      	movs	r1, #100	; 0x64
 804207a:	fb01 f303 	mul.w	r3, r1, r3
 804207e:	1ad3      	subs	r3, r2, r3
 8042080:	011b      	lsls	r3, r3, #4
 8042082:	3332      	adds	r3, #50	; 0x32
 8042084:	4a08      	ldr	r2, [pc, #32]	; (80420a8 <UART_SetConfig+0x4e4>)
 8042086:	fba2 2303 	umull	r2, r3, r2, r3
 804208a:	095b      	lsrs	r3, r3, #5
 804208c:	f003 020f 	and.w	r2, r3, #15
 8042090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042094:	681b      	ldr	r3, [r3, #0]
 8042096:	4422      	add	r2, r4
 8042098:	609a      	str	r2, [r3, #8]
}
 804209a:	bf00      	nop
 804209c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80420a0:	46bd      	mov	sp, r7
 80420a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80420a6:	bf00      	nop
 80420a8:	51eb851f 	.word	0x51eb851f

080420ac <__errno>:
 80420ac:	4b01      	ldr	r3, [pc, #4]	; (80420b4 <__errno+0x8>)
 80420ae:	6818      	ldr	r0, [r3, #0]
 80420b0:	4770      	bx	lr
 80420b2:	bf00      	nop
 80420b4:	2000000c 	.word	0x2000000c

080420b8 <__libc_init_array>:
 80420b8:	b570      	push	{r4, r5, r6, lr}
 80420ba:	4d0d      	ldr	r5, [pc, #52]	; (80420f0 <__libc_init_array+0x38>)
 80420bc:	4c0d      	ldr	r4, [pc, #52]	; (80420f4 <__libc_init_array+0x3c>)
 80420be:	1b64      	subs	r4, r4, r5
 80420c0:	10a4      	asrs	r4, r4, #2
 80420c2:	2600      	movs	r6, #0
 80420c4:	42a6      	cmp	r6, r4
 80420c6:	d109      	bne.n	80420dc <__libc_init_array+0x24>
 80420c8:	4d0b      	ldr	r5, [pc, #44]	; (80420f8 <__libc_init_array+0x40>)
 80420ca:	4c0c      	ldr	r4, [pc, #48]	; (80420fc <__libc_init_array+0x44>)
 80420cc:	f000 fc8e 	bl	80429ec <_init>
 80420d0:	1b64      	subs	r4, r4, r5
 80420d2:	10a4      	asrs	r4, r4, #2
 80420d4:	2600      	movs	r6, #0
 80420d6:	42a6      	cmp	r6, r4
 80420d8:	d105      	bne.n	80420e6 <__libc_init_array+0x2e>
 80420da:	bd70      	pop	{r4, r5, r6, pc}
 80420dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80420e0:	4798      	blx	r3
 80420e2:	3601      	adds	r6, #1
 80420e4:	e7ee      	b.n	80420c4 <__libc_init_array+0xc>
 80420e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80420ea:	4798      	blx	r3
 80420ec:	3601      	adds	r6, #1
 80420ee:	e7f2      	b.n	80420d6 <__libc_init_array+0x1e>
 80420f0:	08042a7c 	.word	0x08042a7c
 80420f4:	08042a7c 	.word	0x08042a7c
 80420f8:	08042a7c 	.word	0x08042a7c
 80420fc:	08042a80 	.word	0x08042a80

08042100 <memset>:
 8042100:	4402      	add	r2, r0
 8042102:	4603      	mov	r3, r0
 8042104:	4293      	cmp	r3, r2
 8042106:	d100      	bne.n	804210a <memset+0xa>
 8042108:	4770      	bx	lr
 804210a:	f803 1b01 	strb.w	r1, [r3], #1
 804210e:	e7f9      	b.n	8042104 <memset+0x4>

08042110 <siprintf>:
 8042110:	b40e      	push	{r1, r2, r3}
 8042112:	b500      	push	{lr}
 8042114:	b09c      	sub	sp, #112	; 0x70
 8042116:	ab1d      	add	r3, sp, #116	; 0x74
 8042118:	9002      	str	r0, [sp, #8]
 804211a:	9006      	str	r0, [sp, #24]
 804211c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8042120:	4809      	ldr	r0, [pc, #36]	; (8042148 <siprintf+0x38>)
 8042122:	9107      	str	r1, [sp, #28]
 8042124:	9104      	str	r1, [sp, #16]
 8042126:	4909      	ldr	r1, [pc, #36]	; (804214c <siprintf+0x3c>)
 8042128:	f853 2b04 	ldr.w	r2, [r3], #4
 804212c:	9105      	str	r1, [sp, #20]
 804212e:	6800      	ldr	r0, [r0, #0]
 8042130:	9301      	str	r3, [sp, #4]
 8042132:	a902      	add	r1, sp, #8
 8042134:	f000 f868 	bl	8042208 <_svfiprintf_r>
 8042138:	9b02      	ldr	r3, [sp, #8]
 804213a:	2200      	movs	r2, #0
 804213c:	701a      	strb	r2, [r3, #0]
 804213e:	b01c      	add	sp, #112	; 0x70
 8042140:	f85d eb04 	ldr.w	lr, [sp], #4
 8042144:	b003      	add	sp, #12
 8042146:	4770      	bx	lr
 8042148:	2000000c 	.word	0x2000000c
 804214c:	ffff0208 	.word	0xffff0208

08042150 <__ssputs_r>:
 8042150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8042154:	688e      	ldr	r6, [r1, #8]
 8042156:	429e      	cmp	r6, r3
 8042158:	4682      	mov	sl, r0
 804215a:	460c      	mov	r4, r1
 804215c:	4690      	mov	r8, r2
 804215e:	461f      	mov	r7, r3
 8042160:	d838      	bhi.n	80421d4 <__ssputs_r+0x84>
 8042162:	898a      	ldrh	r2, [r1, #12]
 8042164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8042168:	d032      	beq.n	80421d0 <__ssputs_r+0x80>
 804216a:	6825      	ldr	r5, [r4, #0]
 804216c:	6909      	ldr	r1, [r1, #16]
 804216e:	eba5 0901 	sub.w	r9, r5, r1
 8042172:	6965      	ldr	r5, [r4, #20]
 8042174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8042178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804217c:	3301      	adds	r3, #1
 804217e:	444b      	add	r3, r9
 8042180:	106d      	asrs	r5, r5, #1
 8042182:	429d      	cmp	r5, r3
 8042184:	bf38      	it	cc
 8042186:	461d      	movcc	r5, r3
 8042188:	0553      	lsls	r3, r2, #21
 804218a:	d531      	bpl.n	80421f0 <__ssputs_r+0xa0>
 804218c:	4629      	mov	r1, r5
 804218e:	f000 fb63 	bl	8042858 <_malloc_r>
 8042192:	4606      	mov	r6, r0
 8042194:	b950      	cbnz	r0, 80421ac <__ssputs_r+0x5c>
 8042196:	230c      	movs	r3, #12
 8042198:	f8ca 3000 	str.w	r3, [sl]
 804219c:	89a3      	ldrh	r3, [r4, #12]
 804219e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80421a2:	81a3      	strh	r3, [r4, #12]
 80421a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80421a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80421ac:	6921      	ldr	r1, [r4, #16]
 80421ae:	464a      	mov	r2, r9
 80421b0:	f000 fabe 	bl	8042730 <memcpy>
 80421b4:	89a3      	ldrh	r3, [r4, #12]
 80421b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80421ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80421be:	81a3      	strh	r3, [r4, #12]
 80421c0:	6126      	str	r6, [r4, #16]
 80421c2:	6165      	str	r5, [r4, #20]
 80421c4:	444e      	add	r6, r9
 80421c6:	eba5 0509 	sub.w	r5, r5, r9
 80421ca:	6026      	str	r6, [r4, #0]
 80421cc:	60a5      	str	r5, [r4, #8]
 80421ce:	463e      	mov	r6, r7
 80421d0:	42be      	cmp	r6, r7
 80421d2:	d900      	bls.n	80421d6 <__ssputs_r+0x86>
 80421d4:	463e      	mov	r6, r7
 80421d6:	6820      	ldr	r0, [r4, #0]
 80421d8:	4632      	mov	r2, r6
 80421da:	4641      	mov	r1, r8
 80421dc:	f000 fab6 	bl	804274c <memmove>
 80421e0:	68a3      	ldr	r3, [r4, #8]
 80421e2:	1b9b      	subs	r3, r3, r6
 80421e4:	60a3      	str	r3, [r4, #8]
 80421e6:	6823      	ldr	r3, [r4, #0]
 80421e8:	4433      	add	r3, r6
 80421ea:	6023      	str	r3, [r4, #0]
 80421ec:	2000      	movs	r0, #0
 80421ee:	e7db      	b.n	80421a8 <__ssputs_r+0x58>
 80421f0:	462a      	mov	r2, r5
 80421f2:	f000 fba5 	bl	8042940 <_realloc_r>
 80421f6:	4606      	mov	r6, r0
 80421f8:	2800      	cmp	r0, #0
 80421fa:	d1e1      	bne.n	80421c0 <__ssputs_r+0x70>
 80421fc:	6921      	ldr	r1, [r4, #16]
 80421fe:	4650      	mov	r0, sl
 8042200:	f000 fabe 	bl	8042780 <_free_r>
 8042204:	e7c7      	b.n	8042196 <__ssputs_r+0x46>
	...

08042208 <_svfiprintf_r>:
 8042208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804220c:	4698      	mov	r8, r3
 804220e:	898b      	ldrh	r3, [r1, #12]
 8042210:	061b      	lsls	r3, r3, #24
 8042212:	b09d      	sub	sp, #116	; 0x74
 8042214:	4607      	mov	r7, r0
 8042216:	460d      	mov	r5, r1
 8042218:	4614      	mov	r4, r2
 804221a:	d50e      	bpl.n	804223a <_svfiprintf_r+0x32>
 804221c:	690b      	ldr	r3, [r1, #16]
 804221e:	b963      	cbnz	r3, 804223a <_svfiprintf_r+0x32>
 8042220:	2140      	movs	r1, #64	; 0x40
 8042222:	f000 fb19 	bl	8042858 <_malloc_r>
 8042226:	6028      	str	r0, [r5, #0]
 8042228:	6128      	str	r0, [r5, #16]
 804222a:	b920      	cbnz	r0, 8042236 <_svfiprintf_r+0x2e>
 804222c:	230c      	movs	r3, #12
 804222e:	603b      	str	r3, [r7, #0]
 8042230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042234:	e0d1      	b.n	80423da <_svfiprintf_r+0x1d2>
 8042236:	2340      	movs	r3, #64	; 0x40
 8042238:	616b      	str	r3, [r5, #20]
 804223a:	2300      	movs	r3, #0
 804223c:	9309      	str	r3, [sp, #36]	; 0x24
 804223e:	2320      	movs	r3, #32
 8042240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8042244:	f8cd 800c 	str.w	r8, [sp, #12]
 8042248:	2330      	movs	r3, #48	; 0x30
 804224a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80423f4 <_svfiprintf_r+0x1ec>
 804224e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8042252:	f04f 0901 	mov.w	r9, #1
 8042256:	4623      	mov	r3, r4
 8042258:	469a      	mov	sl, r3
 804225a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804225e:	b10a      	cbz	r2, 8042264 <_svfiprintf_r+0x5c>
 8042260:	2a25      	cmp	r2, #37	; 0x25
 8042262:	d1f9      	bne.n	8042258 <_svfiprintf_r+0x50>
 8042264:	ebba 0b04 	subs.w	fp, sl, r4
 8042268:	d00b      	beq.n	8042282 <_svfiprintf_r+0x7a>
 804226a:	465b      	mov	r3, fp
 804226c:	4622      	mov	r2, r4
 804226e:	4629      	mov	r1, r5
 8042270:	4638      	mov	r0, r7
 8042272:	f7ff ff6d 	bl	8042150 <__ssputs_r>
 8042276:	3001      	adds	r0, #1
 8042278:	f000 80aa 	beq.w	80423d0 <_svfiprintf_r+0x1c8>
 804227c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804227e:	445a      	add	r2, fp
 8042280:	9209      	str	r2, [sp, #36]	; 0x24
 8042282:	f89a 3000 	ldrb.w	r3, [sl]
 8042286:	2b00      	cmp	r3, #0
 8042288:	f000 80a2 	beq.w	80423d0 <_svfiprintf_r+0x1c8>
 804228c:	2300      	movs	r3, #0
 804228e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8042292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8042296:	f10a 0a01 	add.w	sl, sl, #1
 804229a:	9304      	str	r3, [sp, #16]
 804229c:	9307      	str	r3, [sp, #28]
 804229e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80422a2:	931a      	str	r3, [sp, #104]	; 0x68
 80422a4:	4654      	mov	r4, sl
 80422a6:	2205      	movs	r2, #5
 80422a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80422ac:	4851      	ldr	r0, [pc, #324]	; (80423f4 <_svfiprintf_r+0x1ec>)
 80422ae:	f7fd ffb7 	bl	8040220 <memchr>
 80422b2:	9a04      	ldr	r2, [sp, #16]
 80422b4:	b9d8      	cbnz	r0, 80422ee <_svfiprintf_r+0xe6>
 80422b6:	06d0      	lsls	r0, r2, #27
 80422b8:	bf44      	itt	mi
 80422ba:	2320      	movmi	r3, #32
 80422bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80422c0:	0711      	lsls	r1, r2, #28
 80422c2:	bf44      	itt	mi
 80422c4:	232b      	movmi	r3, #43	; 0x2b
 80422c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80422ca:	f89a 3000 	ldrb.w	r3, [sl]
 80422ce:	2b2a      	cmp	r3, #42	; 0x2a
 80422d0:	d015      	beq.n	80422fe <_svfiprintf_r+0xf6>
 80422d2:	9a07      	ldr	r2, [sp, #28]
 80422d4:	4654      	mov	r4, sl
 80422d6:	2000      	movs	r0, #0
 80422d8:	f04f 0c0a 	mov.w	ip, #10
 80422dc:	4621      	mov	r1, r4
 80422de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80422e2:	3b30      	subs	r3, #48	; 0x30
 80422e4:	2b09      	cmp	r3, #9
 80422e6:	d94e      	bls.n	8042386 <_svfiprintf_r+0x17e>
 80422e8:	b1b0      	cbz	r0, 8042318 <_svfiprintf_r+0x110>
 80422ea:	9207      	str	r2, [sp, #28]
 80422ec:	e014      	b.n	8042318 <_svfiprintf_r+0x110>
 80422ee:	eba0 0308 	sub.w	r3, r0, r8
 80422f2:	fa09 f303 	lsl.w	r3, r9, r3
 80422f6:	4313      	orrs	r3, r2
 80422f8:	9304      	str	r3, [sp, #16]
 80422fa:	46a2      	mov	sl, r4
 80422fc:	e7d2      	b.n	80422a4 <_svfiprintf_r+0x9c>
 80422fe:	9b03      	ldr	r3, [sp, #12]
 8042300:	1d19      	adds	r1, r3, #4
 8042302:	681b      	ldr	r3, [r3, #0]
 8042304:	9103      	str	r1, [sp, #12]
 8042306:	2b00      	cmp	r3, #0
 8042308:	bfbb      	ittet	lt
 804230a:	425b      	neglt	r3, r3
 804230c:	f042 0202 	orrlt.w	r2, r2, #2
 8042310:	9307      	strge	r3, [sp, #28]
 8042312:	9307      	strlt	r3, [sp, #28]
 8042314:	bfb8      	it	lt
 8042316:	9204      	strlt	r2, [sp, #16]
 8042318:	7823      	ldrb	r3, [r4, #0]
 804231a:	2b2e      	cmp	r3, #46	; 0x2e
 804231c:	d10c      	bne.n	8042338 <_svfiprintf_r+0x130>
 804231e:	7863      	ldrb	r3, [r4, #1]
 8042320:	2b2a      	cmp	r3, #42	; 0x2a
 8042322:	d135      	bne.n	8042390 <_svfiprintf_r+0x188>
 8042324:	9b03      	ldr	r3, [sp, #12]
 8042326:	1d1a      	adds	r2, r3, #4
 8042328:	681b      	ldr	r3, [r3, #0]
 804232a:	9203      	str	r2, [sp, #12]
 804232c:	2b00      	cmp	r3, #0
 804232e:	bfb8      	it	lt
 8042330:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8042334:	3402      	adds	r4, #2
 8042336:	9305      	str	r3, [sp, #20]
 8042338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8042404 <_svfiprintf_r+0x1fc>
 804233c:	7821      	ldrb	r1, [r4, #0]
 804233e:	2203      	movs	r2, #3
 8042340:	4650      	mov	r0, sl
 8042342:	f7fd ff6d 	bl	8040220 <memchr>
 8042346:	b140      	cbz	r0, 804235a <_svfiprintf_r+0x152>
 8042348:	2340      	movs	r3, #64	; 0x40
 804234a:	eba0 000a 	sub.w	r0, r0, sl
 804234e:	fa03 f000 	lsl.w	r0, r3, r0
 8042352:	9b04      	ldr	r3, [sp, #16]
 8042354:	4303      	orrs	r3, r0
 8042356:	3401      	adds	r4, #1
 8042358:	9304      	str	r3, [sp, #16]
 804235a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804235e:	4826      	ldr	r0, [pc, #152]	; (80423f8 <_svfiprintf_r+0x1f0>)
 8042360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8042364:	2206      	movs	r2, #6
 8042366:	f7fd ff5b 	bl	8040220 <memchr>
 804236a:	2800      	cmp	r0, #0
 804236c:	d038      	beq.n	80423e0 <_svfiprintf_r+0x1d8>
 804236e:	4b23      	ldr	r3, [pc, #140]	; (80423fc <_svfiprintf_r+0x1f4>)
 8042370:	bb1b      	cbnz	r3, 80423ba <_svfiprintf_r+0x1b2>
 8042372:	9b03      	ldr	r3, [sp, #12]
 8042374:	3307      	adds	r3, #7
 8042376:	f023 0307 	bic.w	r3, r3, #7
 804237a:	3308      	adds	r3, #8
 804237c:	9303      	str	r3, [sp, #12]
 804237e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042380:	4433      	add	r3, r6
 8042382:	9309      	str	r3, [sp, #36]	; 0x24
 8042384:	e767      	b.n	8042256 <_svfiprintf_r+0x4e>
 8042386:	fb0c 3202 	mla	r2, ip, r2, r3
 804238a:	460c      	mov	r4, r1
 804238c:	2001      	movs	r0, #1
 804238e:	e7a5      	b.n	80422dc <_svfiprintf_r+0xd4>
 8042390:	2300      	movs	r3, #0
 8042392:	3401      	adds	r4, #1
 8042394:	9305      	str	r3, [sp, #20]
 8042396:	4619      	mov	r1, r3
 8042398:	f04f 0c0a 	mov.w	ip, #10
 804239c:	4620      	mov	r0, r4
 804239e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80423a2:	3a30      	subs	r2, #48	; 0x30
 80423a4:	2a09      	cmp	r2, #9
 80423a6:	d903      	bls.n	80423b0 <_svfiprintf_r+0x1a8>
 80423a8:	2b00      	cmp	r3, #0
 80423aa:	d0c5      	beq.n	8042338 <_svfiprintf_r+0x130>
 80423ac:	9105      	str	r1, [sp, #20]
 80423ae:	e7c3      	b.n	8042338 <_svfiprintf_r+0x130>
 80423b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80423b4:	4604      	mov	r4, r0
 80423b6:	2301      	movs	r3, #1
 80423b8:	e7f0      	b.n	804239c <_svfiprintf_r+0x194>
 80423ba:	ab03      	add	r3, sp, #12
 80423bc:	9300      	str	r3, [sp, #0]
 80423be:	462a      	mov	r2, r5
 80423c0:	4b0f      	ldr	r3, [pc, #60]	; (8042400 <_svfiprintf_r+0x1f8>)
 80423c2:	a904      	add	r1, sp, #16
 80423c4:	4638      	mov	r0, r7
 80423c6:	f3af 8000 	nop.w
 80423ca:	1c42      	adds	r2, r0, #1
 80423cc:	4606      	mov	r6, r0
 80423ce:	d1d6      	bne.n	804237e <_svfiprintf_r+0x176>
 80423d0:	89ab      	ldrh	r3, [r5, #12]
 80423d2:	065b      	lsls	r3, r3, #25
 80423d4:	f53f af2c 	bmi.w	8042230 <_svfiprintf_r+0x28>
 80423d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80423da:	b01d      	add	sp, #116	; 0x74
 80423dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80423e0:	ab03      	add	r3, sp, #12
 80423e2:	9300      	str	r3, [sp, #0]
 80423e4:	462a      	mov	r2, r5
 80423e6:	4b06      	ldr	r3, [pc, #24]	; (8042400 <_svfiprintf_r+0x1f8>)
 80423e8:	a904      	add	r1, sp, #16
 80423ea:	4638      	mov	r0, r7
 80423ec:	f000 f87a 	bl	80424e4 <_printf_i>
 80423f0:	e7eb      	b.n	80423ca <_svfiprintf_r+0x1c2>
 80423f2:	bf00      	nop
 80423f4:	08042a40 	.word	0x08042a40
 80423f8:	08042a4a 	.word	0x08042a4a
 80423fc:	00000000 	.word	0x00000000
 8042400:	08042151 	.word	0x08042151
 8042404:	08042a46 	.word	0x08042a46

08042408 <_printf_common>:
 8042408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804240c:	4616      	mov	r6, r2
 804240e:	4699      	mov	r9, r3
 8042410:	688a      	ldr	r2, [r1, #8]
 8042412:	690b      	ldr	r3, [r1, #16]
 8042414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8042418:	4293      	cmp	r3, r2
 804241a:	bfb8      	it	lt
 804241c:	4613      	movlt	r3, r2
 804241e:	6033      	str	r3, [r6, #0]
 8042420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8042424:	4607      	mov	r7, r0
 8042426:	460c      	mov	r4, r1
 8042428:	b10a      	cbz	r2, 804242e <_printf_common+0x26>
 804242a:	3301      	adds	r3, #1
 804242c:	6033      	str	r3, [r6, #0]
 804242e:	6823      	ldr	r3, [r4, #0]
 8042430:	0699      	lsls	r1, r3, #26
 8042432:	bf42      	ittt	mi
 8042434:	6833      	ldrmi	r3, [r6, #0]
 8042436:	3302      	addmi	r3, #2
 8042438:	6033      	strmi	r3, [r6, #0]
 804243a:	6825      	ldr	r5, [r4, #0]
 804243c:	f015 0506 	ands.w	r5, r5, #6
 8042440:	d106      	bne.n	8042450 <_printf_common+0x48>
 8042442:	f104 0a19 	add.w	sl, r4, #25
 8042446:	68e3      	ldr	r3, [r4, #12]
 8042448:	6832      	ldr	r2, [r6, #0]
 804244a:	1a9b      	subs	r3, r3, r2
 804244c:	42ab      	cmp	r3, r5
 804244e:	dc26      	bgt.n	804249e <_printf_common+0x96>
 8042450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8042454:	1e13      	subs	r3, r2, #0
 8042456:	6822      	ldr	r2, [r4, #0]
 8042458:	bf18      	it	ne
 804245a:	2301      	movne	r3, #1
 804245c:	0692      	lsls	r2, r2, #26
 804245e:	d42b      	bmi.n	80424b8 <_printf_common+0xb0>
 8042460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8042464:	4649      	mov	r1, r9
 8042466:	4638      	mov	r0, r7
 8042468:	47c0      	blx	r8
 804246a:	3001      	adds	r0, #1
 804246c:	d01e      	beq.n	80424ac <_printf_common+0xa4>
 804246e:	6823      	ldr	r3, [r4, #0]
 8042470:	68e5      	ldr	r5, [r4, #12]
 8042472:	6832      	ldr	r2, [r6, #0]
 8042474:	f003 0306 	and.w	r3, r3, #6
 8042478:	2b04      	cmp	r3, #4
 804247a:	bf08      	it	eq
 804247c:	1aad      	subeq	r5, r5, r2
 804247e:	68a3      	ldr	r3, [r4, #8]
 8042480:	6922      	ldr	r2, [r4, #16]
 8042482:	bf0c      	ite	eq
 8042484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8042488:	2500      	movne	r5, #0
 804248a:	4293      	cmp	r3, r2
 804248c:	bfc4      	itt	gt
 804248e:	1a9b      	subgt	r3, r3, r2
 8042490:	18ed      	addgt	r5, r5, r3
 8042492:	2600      	movs	r6, #0
 8042494:	341a      	adds	r4, #26
 8042496:	42b5      	cmp	r5, r6
 8042498:	d11a      	bne.n	80424d0 <_printf_common+0xc8>
 804249a:	2000      	movs	r0, #0
 804249c:	e008      	b.n	80424b0 <_printf_common+0xa8>
 804249e:	2301      	movs	r3, #1
 80424a0:	4652      	mov	r2, sl
 80424a2:	4649      	mov	r1, r9
 80424a4:	4638      	mov	r0, r7
 80424a6:	47c0      	blx	r8
 80424a8:	3001      	adds	r0, #1
 80424aa:	d103      	bne.n	80424b4 <_printf_common+0xac>
 80424ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80424b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80424b4:	3501      	adds	r5, #1
 80424b6:	e7c6      	b.n	8042446 <_printf_common+0x3e>
 80424b8:	18e1      	adds	r1, r4, r3
 80424ba:	1c5a      	adds	r2, r3, #1
 80424bc:	2030      	movs	r0, #48	; 0x30
 80424be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80424c2:	4422      	add	r2, r4
 80424c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80424c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80424cc:	3302      	adds	r3, #2
 80424ce:	e7c7      	b.n	8042460 <_printf_common+0x58>
 80424d0:	2301      	movs	r3, #1
 80424d2:	4622      	mov	r2, r4
 80424d4:	4649      	mov	r1, r9
 80424d6:	4638      	mov	r0, r7
 80424d8:	47c0      	blx	r8
 80424da:	3001      	adds	r0, #1
 80424dc:	d0e6      	beq.n	80424ac <_printf_common+0xa4>
 80424de:	3601      	adds	r6, #1
 80424e0:	e7d9      	b.n	8042496 <_printf_common+0x8e>
	...

080424e4 <_printf_i>:
 80424e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80424e8:	7e0f      	ldrb	r7, [r1, #24]
 80424ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80424ec:	2f78      	cmp	r7, #120	; 0x78
 80424ee:	4691      	mov	r9, r2
 80424f0:	4680      	mov	r8, r0
 80424f2:	460c      	mov	r4, r1
 80424f4:	469a      	mov	sl, r3
 80424f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80424fa:	d807      	bhi.n	804250c <_printf_i+0x28>
 80424fc:	2f62      	cmp	r7, #98	; 0x62
 80424fe:	d80a      	bhi.n	8042516 <_printf_i+0x32>
 8042500:	2f00      	cmp	r7, #0
 8042502:	f000 80d8 	beq.w	80426b6 <_printf_i+0x1d2>
 8042506:	2f58      	cmp	r7, #88	; 0x58
 8042508:	f000 80a3 	beq.w	8042652 <_printf_i+0x16e>
 804250c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8042510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8042514:	e03a      	b.n	804258c <_printf_i+0xa8>
 8042516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804251a:	2b15      	cmp	r3, #21
 804251c:	d8f6      	bhi.n	804250c <_printf_i+0x28>
 804251e:	a101      	add	r1, pc, #4	; (adr r1, 8042524 <_printf_i+0x40>)
 8042520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8042524:	0804257d 	.word	0x0804257d
 8042528:	08042591 	.word	0x08042591
 804252c:	0804250d 	.word	0x0804250d
 8042530:	0804250d 	.word	0x0804250d
 8042534:	0804250d 	.word	0x0804250d
 8042538:	0804250d 	.word	0x0804250d
 804253c:	08042591 	.word	0x08042591
 8042540:	0804250d 	.word	0x0804250d
 8042544:	0804250d 	.word	0x0804250d
 8042548:	0804250d 	.word	0x0804250d
 804254c:	0804250d 	.word	0x0804250d
 8042550:	0804269d 	.word	0x0804269d
 8042554:	080425c1 	.word	0x080425c1
 8042558:	0804267f 	.word	0x0804267f
 804255c:	0804250d 	.word	0x0804250d
 8042560:	0804250d 	.word	0x0804250d
 8042564:	080426bf 	.word	0x080426bf
 8042568:	0804250d 	.word	0x0804250d
 804256c:	080425c1 	.word	0x080425c1
 8042570:	0804250d 	.word	0x0804250d
 8042574:	0804250d 	.word	0x0804250d
 8042578:	08042687 	.word	0x08042687
 804257c:	682b      	ldr	r3, [r5, #0]
 804257e:	1d1a      	adds	r2, r3, #4
 8042580:	681b      	ldr	r3, [r3, #0]
 8042582:	602a      	str	r2, [r5, #0]
 8042584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8042588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804258c:	2301      	movs	r3, #1
 804258e:	e0a3      	b.n	80426d8 <_printf_i+0x1f4>
 8042590:	6820      	ldr	r0, [r4, #0]
 8042592:	6829      	ldr	r1, [r5, #0]
 8042594:	0606      	lsls	r6, r0, #24
 8042596:	f101 0304 	add.w	r3, r1, #4
 804259a:	d50a      	bpl.n	80425b2 <_printf_i+0xce>
 804259c:	680e      	ldr	r6, [r1, #0]
 804259e:	602b      	str	r3, [r5, #0]
 80425a0:	2e00      	cmp	r6, #0
 80425a2:	da03      	bge.n	80425ac <_printf_i+0xc8>
 80425a4:	232d      	movs	r3, #45	; 0x2d
 80425a6:	4276      	negs	r6, r6
 80425a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80425ac:	485e      	ldr	r0, [pc, #376]	; (8042728 <_printf_i+0x244>)
 80425ae:	230a      	movs	r3, #10
 80425b0:	e019      	b.n	80425e6 <_printf_i+0x102>
 80425b2:	680e      	ldr	r6, [r1, #0]
 80425b4:	602b      	str	r3, [r5, #0]
 80425b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80425ba:	bf18      	it	ne
 80425bc:	b236      	sxthne	r6, r6
 80425be:	e7ef      	b.n	80425a0 <_printf_i+0xbc>
 80425c0:	682b      	ldr	r3, [r5, #0]
 80425c2:	6820      	ldr	r0, [r4, #0]
 80425c4:	1d19      	adds	r1, r3, #4
 80425c6:	6029      	str	r1, [r5, #0]
 80425c8:	0601      	lsls	r1, r0, #24
 80425ca:	d501      	bpl.n	80425d0 <_printf_i+0xec>
 80425cc:	681e      	ldr	r6, [r3, #0]
 80425ce:	e002      	b.n	80425d6 <_printf_i+0xf2>
 80425d0:	0646      	lsls	r6, r0, #25
 80425d2:	d5fb      	bpl.n	80425cc <_printf_i+0xe8>
 80425d4:	881e      	ldrh	r6, [r3, #0]
 80425d6:	4854      	ldr	r0, [pc, #336]	; (8042728 <_printf_i+0x244>)
 80425d8:	2f6f      	cmp	r7, #111	; 0x6f
 80425da:	bf0c      	ite	eq
 80425dc:	2308      	moveq	r3, #8
 80425de:	230a      	movne	r3, #10
 80425e0:	2100      	movs	r1, #0
 80425e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80425e6:	6865      	ldr	r5, [r4, #4]
 80425e8:	60a5      	str	r5, [r4, #8]
 80425ea:	2d00      	cmp	r5, #0
 80425ec:	bfa2      	ittt	ge
 80425ee:	6821      	ldrge	r1, [r4, #0]
 80425f0:	f021 0104 	bicge.w	r1, r1, #4
 80425f4:	6021      	strge	r1, [r4, #0]
 80425f6:	b90e      	cbnz	r6, 80425fc <_printf_i+0x118>
 80425f8:	2d00      	cmp	r5, #0
 80425fa:	d04d      	beq.n	8042698 <_printf_i+0x1b4>
 80425fc:	4615      	mov	r5, r2
 80425fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8042602:	fb03 6711 	mls	r7, r3, r1, r6
 8042606:	5dc7      	ldrb	r7, [r0, r7]
 8042608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804260c:	4637      	mov	r7, r6
 804260e:	42bb      	cmp	r3, r7
 8042610:	460e      	mov	r6, r1
 8042612:	d9f4      	bls.n	80425fe <_printf_i+0x11a>
 8042614:	2b08      	cmp	r3, #8
 8042616:	d10b      	bne.n	8042630 <_printf_i+0x14c>
 8042618:	6823      	ldr	r3, [r4, #0]
 804261a:	07de      	lsls	r6, r3, #31
 804261c:	d508      	bpl.n	8042630 <_printf_i+0x14c>
 804261e:	6923      	ldr	r3, [r4, #16]
 8042620:	6861      	ldr	r1, [r4, #4]
 8042622:	4299      	cmp	r1, r3
 8042624:	bfde      	ittt	le
 8042626:	2330      	movle	r3, #48	; 0x30
 8042628:	f805 3c01 	strble.w	r3, [r5, #-1]
 804262c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8042630:	1b52      	subs	r2, r2, r5
 8042632:	6122      	str	r2, [r4, #16]
 8042634:	f8cd a000 	str.w	sl, [sp]
 8042638:	464b      	mov	r3, r9
 804263a:	aa03      	add	r2, sp, #12
 804263c:	4621      	mov	r1, r4
 804263e:	4640      	mov	r0, r8
 8042640:	f7ff fee2 	bl	8042408 <_printf_common>
 8042644:	3001      	adds	r0, #1
 8042646:	d14c      	bne.n	80426e2 <_printf_i+0x1fe>
 8042648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804264c:	b004      	add	sp, #16
 804264e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8042652:	4835      	ldr	r0, [pc, #212]	; (8042728 <_printf_i+0x244>)
 8042654:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8042658:	6829      	ldr	r1, [r5, #0]
 804265a:	6823      	ldr	r3, [r4, #0]
 804265c:	f851 6b04 	ldr.w	r6, [r1], #4
 8042660:	6029      	str	r1, [r5, #0]
 8042662:	061d      	lsls	r5, r3, #24
 8042664:	d514      	bpl.n	8042690 <_printf_i+0x1ac>
 8042666:	07df      	lsls	r7, r3, #31
 8042668:	bf44      	itt	mi
 804266a:	f043 0320 	orrmi.w	r3, r3, #32
 804266e:	6023      	strmi	r3, [r4, #0]
 8042670:	b91e      	cbnz	r6, 804267a <_printf_i+0x196>
 8042672:	6823      	ldr	r3, [r4, #0]
 8042674:	f023 0320 	bic.w	r3, r3, #32
 8042678:	6023      	str	r3, [r4, #0]
 804267a:	2310      	movs	r3, #16
 804267c:	e7b0      	b.n	80425e0 <_printf_i+0xfc>
 804267e:	6823      	ldr	r3, [r4, #0]
 8042680:	f043 0320 	orr.w	r3, r3, #32
 8042684:	6023      	str	r3, [r4, #0]
 8042686:	2378      	movs	r3, #120	; 0x78
 8042688:	4828      	ldr	r0, [pc, #160]	; (804272c <_printf_i+0x248>)
 804268a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804268e:	e7e3      	b.n	8042658 <_printf_i+0x174>
 8042690:	0659      	lsls	r1, r3, #25
 8042692:	bf48      	it	mi
 8042694:	b2b6      	uxthmi	r6, r6
 8042696:	e7e6      	b.n	8042666 <_printf_i+0x182>
 8042698:	4615      	mov	r5, r2
 804269a:	e7bb      	b.n	8042614 <_printf_i+0x130>
 804269c:	682b      	ldr	r3, [r5, #0]
 804269e:	6826      	ldr	r6, [r4, #0]
 80426a0:	6961      	ldr	r1, [r4, #20]
 80426a2:	1d18      	adds	r0, r3, #4
 80426a4:	6028      	str	r0, [r5, #0]
 80426a6:	0635      	lsls	r5, r6, #24
 80426a8:	681b      	ldr	r3, [r3, #0]
 80426aa:	d501      	bpl.n	80426b0 <_printf_i+0x1cc>
 80426ac:	6019      	str	r1, [r3, #0]
 80426ae:	e002      	b.n	80426b6 <_printf_i+0x1d2>
 80426b0:	0670      	lsls	r0, r6, #25
 80426b2:	d5fb      	bpl.n	80426ac <_printf_i+0x1c8>
 80426b4:	8019      	strh	r1, [r3, #0]
 80426b6:	2300      	movs	r3, #0
 80426b8:	6123      	str	r3, [r4, #16]
 80426ba:	4615      	mov	r5, r2
 80426bc:	e7ba      	b.n	8042634 <_printf_i+0x150>
 80426be:	682b      	ldr	r3, [r5, #0]
 80426c0:	1d1a      	adds	r2, r3, #4
 80426c2:	602a      	str	r2, [r5, #0]
 80426c4:	681d      	ldr	r5, [r3, #0]
 80426c6:	6862      	ldr	r2, [r4, #4]
 80426c8:	2100      	movs	r1, #0
 80426ca:	4628      	mov	r0, r5
 80426cc:	f7fd fda8 	bl	8040220 <memchr>
 80426d0:	b108      	cbz	r0, 80426d6 <_printf_i+0x1f2>
 80426d2:	1b40      	subs	r0, r0, r5
 80426d4:	6060      	str	r0, [r4, #4]
 80426d6:	6863      	ldr	r3, [r4, #4]
 80426d8:	6123      	str	r3, [r4, #16]
 80426da:	2300      	movs	r3, #0
 80426dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80426e0:	e7a8      	b.n	8042634 <_printf_i+0x150>
 80426e2:	6923      	ldr	r3, [r4, #16]
 80426e4:	462a      	mov	r2, r5
 80426e6:	4649      	mov	r1, r9
 80426e8:	4640      	mov	r0, r8
 80426ea:	47d0      	blx	sl
 80426ec:	3001      	adds	r0, #1
 80426ee:	d0ab      	beq.n	8042648 <_printf_i+0x164>
 80426f0:	6823      	ldr	r3, [r4, #0]
 80426f2:	079b      	lsls	r3, r3, #30
 80426f4:	d413      	bmi.n	804271e <_printf_i+0x23a>
 80426f6:	68e0      	ldr	r0, [r4, #12]
 80426f8:	9b03      	ldr	r3, [sp, #12]
 80426fa:	4298      	cmp	r0, r3
 80426fc:	bfb8      	it	lt
 80426fe:	4618      	movlt	r0, r3
 8042700:	e7a4      	b.n	804264c <_printf_i+0x168>
 8042702:	2301      	movs	r3, #1
 8042704:	4632      	mov	r2, r6
 8042706:	4649      	mov	r1, r9
 8042708:	4640      	mov	r0, r8
 804270a:	47d0      	blx	sl
 804270c:	3001      	adds	r0, #1
 804270e:	d09b      	beq.n	8042648 <_printf_i+0x164>
 8042710:	3501      	adds	r5, #1
 8042712:	68e3      	ldr	r3, [r4, #12]
 8042714:	9903      	ldr	r1, [sp, #12]
 8042716:	1a5b      	subs	r3, r3, r1
 8042718:	42ab      	cmp	r3, r5
 804271a:	dcf2      	bgt.n	8042702 <_printf_i+0x21e>
 804271c:	e7eb      	b.n	80426f6 <_printf_i+0x212>
 804271e:	2500      	movs	r5, #0
 8042720:	f104 0619 	add.w	r6, r4, #25
 8042724:	e7f5      	b.n	8042712 <_printf_i+0x22e>
 8042726:	bf00      	nop
 8042728:	08042a51 	.word	0x08042a51
 804272c:	08042a62 	.word	0x08042a62

08042730 <memcpy>:
 8042730:	440a      	add	r2, r1
 8042732:	4291      	cmp	r1, r2
 8042734:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8042738:	d100      	bne.n	804273c <memcpy+0xc>
 804273a:	4770      	bx	lr
 804273c:	b510      	push	{r4, lr}
 804273e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8042742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8042746:	4291      	cmp	r1, r2
 8042748:	d1f9      	bne.n	804273e <memcpy+0xe>
 804274a:	bd10      	pop	{r4, pc}

0804274c <memmove>:
 804274c:	4288      	cmp	r0, r1
 804274e:	b510      	push	{r4, lr}
 8042750:	eb01 0402 	add.w	r4, r1, r2
 8042754:	d902      	bls.n	804275c <memmove+0x10>
 8042756:	4284      	cmp	r4, r0
 8042758:	4623      	mov	r3, r4
 804275a:	d807      	bhi.n	804276c <memmove+0x20>
 804275c:	1e43      	subs	r3, r0, #1
 804275e:	42a1      	cmp	r1, r4
 8042760:	d008      	beq.n	8042774 <memmove+0x28>
 8042762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8042766:	f803 2f01 	strb.w	r2, [r3, #1]!
 804276a:	e7f8      	b.n	804275e <memmove+0x12>
 804276c:	4402      	add	r2, r0
 804276e:	4601      	mov	r1, r0
 8042770:	428a      	cmp	r2, r1
 8042772:	d100      	bne.n	8042776 <memmove+0x2a>
 8042774:	bd10      	pop	{r4, pc}
 8042776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804277a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804277e:	e7f7      	b.n	8042770 <memmove+0x24>

08042780 <_free_r>:
 8042780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8042782:	2900      	cmp	r1, #0
 8042784:	d044      	beq.n	8042810 <_free_r+0x90>
 8042786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804278a:	9001      	str	r0, [sp, #4]
 804278c:	2b00      	cmp	r3, #0
 804278e:	f1a1 0404 	sub.w	r4, r1, #4
 8042792:	bfb8      	it	lt
 8042794:	18e4      	addlt	r4, r4, r3
 8042796:	f000 f913 	bl	80429c0 <__malloc_lock>
 804279a:	4a1e      	ldr	r2, [pc, #120]	; (8042814 <_free_r+0x94>)
 804279c:	9801      	ldr	r0, [sp, #4]
 804279e:	6813      	ldr	r3, [r2, #0]
 80427a0:	b933      	cbnz	r3, 80427b0 <_free_r+0x30>
 80427a2:	6063      	str	r3, [r4, #4]
 80427a4:	6014      	str	r4, [r2, #0]
 80427a6:	b003      	add	sp, #12
 80427a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80427ac:	f000 b90e 	b.w	80429cc <__malloc_unlock>
 80427b0:	42a3      	cmp	r3, r4
 80427b2:	d908      	bls.n	80427c6 <_free_r+0x46>
 80427b4:	6825      	ldr	r5, [r4, #0]
 80427b6:	1961      	adds	r1, r4, r5
 80427b8:	428b      	cmp	r3, r1
 80427ba:	bf01      	itttt	eq
 80427bc:	6819      	ldreq	r1, [r3, #0]
 80427be:	685b      	ldreq	r3, [r3, #4]
 80427c0:	1949      	addeq	r1, r1, r5
 80427c2:	6021      	streq	r1, [r4, #0]
 80427c4:	e7ed      	b.n	80427a2 <_free_r+0x22>
 80427c6:	461a      	mov	r2, r3
 80427c8:	685b      	ldr	r3, [r3, #4]
 80427ca:	b10b      	cbz	r3, 80427d0 <_free_r+0x50>
 80427cc:	42a3      	cmp	r3, r4
 80427ce:	d9fa      	bls.n	80427c6 <_free_r+0x46>
 80427d0:	6811      	ldr	r1, [r2, #0]
 80427d2:	1855      	adds	r5, r2, r1
 80427d4:	42a5      	cmp	r5, r4
 80427d6:	d10b      	bne.n	80427f0 <_free_r+0x70>
 80427d8:	6824      	ldr	r4, [r4, #0]
 80427da:	4421      	add	r1, r4
 80427dc:	1854      	adds	r4, r2, r1
 80427de:	42a3      	cmp	r3, r4
 80427e0:	6011      	str	r1, [r2, #0]
 80427e2:	d1e0      	bne.n	80427a6 <_free_r+0x26>
 80427e4:	681c      	ldr	r4, [r3, #0]
 80427e6:	685b      	ldr	r3, [r3, #4]
 80427e8:	6053      	str	r3, [r2, #4]
 80427ea:	4421      	add	r1, r4
 80427ec:	6011      	str	r1, [r2, #0]
 80427ee:	e7da      	b.n	80427a6 <_free_r+0x26>
 80427f0:	d902      	bls.n	80427f8 <_free_r+0x78>
 80427f2:	230c      	movs	r3, #12
 80427f4:	6003      	str	r3, [r0, #0]
 80427f6:	e7d6      	b.n	80427a6 <_free_r+0x26>
 80427f8:	6825      	ldr	r5, [r4, #0]
 80427fa:	1961      	adds	r1, r4, r5
 80427fc:	428b      	cmp	r3, r1
 80427fe:	bf04      	itt	eq
 8042800:	6819      	ldreq	r1, [r3, #0]
 8042802:	685b      	ldreq	r3, [r3, #4]
 8042804:	6063      	str	r3, [r4, #4]
 8042806:	bf04      	itt	eq
 8042808:	1949      	addeq	r1, r1, r5
 804280a:	6021      	streq	r1, [r4, #0]
 804280c:	6054      	str	r4, [r2, #4]
 804280e:	e7ca      	b.n	80427a6 <_free_r+0x26>
 8042810:	b003      	add	sp, #12
 8042812:	bd30      	pop	{r4, r5, pc}
 8042814:	200000d8 	.word	0x200000d8

08042818 <sbrk_aligned>:
 8042818:	b570      	push	{r4, r5, r6, lr}
 804281a:	4e0e      	ldr	r6, [pc, #56]	; (8042854 <sbrk_aligned+0x3c>)
 804281c:	460c      	mov	r4, r1
 804281e:	6831      	ldr	r1, [r6, #0]
 8042820:	4605      	mov	r5, r0
 8042822:	b911      	cbnz	r1, 804282a <sbrk_aligned+0x12>
 8042824:	f000 f8bc 	bl	80429a0 <_sbrk_r>
 8042828:	6030      	str	r0, [r6, #0]
 804282a:	4621      	mov	r1, r4
 804282c:	4628      	mov	r0, r5
 804282e:	f000 f8b7 	bl	80429a0 <_sbrk_r>
 8042832:	1c43      	adds	r3, r0, #1
 8042834:	d00a      	beq.n	804284c <sbrk_aligned+0x34>
 8042836:	1cc4      	adds	r4, r0, #3
 8042838:	f024 0403 	bic.w	r4, r4, #3
 804283c:	42a0      	cmp	r0, r4
 804283e:	d007      	beq.n	8042850 <sbrk_aligned+0x38>
 8042840:	1a21      	subs	r1, r4, r0
 8042842:	4628      	mov	r0, r5
 8042844:	f000 f8ac 	bl	80429a0 <_sbrk_r>
 8042848:	3001      	adds	r0, #1
 804284a:	d101      	bne.n	8042850 <sbrk_aligned+0x38>
 804284c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8042850:	4620      	mov	r0, r4
 8042852:	bd70      	pop	{r4, r5, r6, pc}
 8042854:	200000dc 	.word	0x200000dc

08042858 <_malloc_r>:
 8042858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804285c:	1ccd      	adds	r5, r1, #3
 804285e:	f025 0503 	bic.w	r5, r5, #3
 8042862:	3508      	adds	r5, #8
 8042864:	2d0c      	cmp	r5, #12
 8042866:	bf38      	it	cc
 8042868:	250c      	movcc	r5, #12
 804286a:	2d00      	cmp	r5, #0
 804286c:	4607      	mov	r7, r0
 804286e:	db01      	blt.n	8042874 <_malloc_r+0x1c>
 8042870:	42a9      	cmp	r1, r5
 8042872:	d905      	bls.n	8042880 <_malloc_r+0x28>
 8042874:	230c      	movs	r3, #12
 8042876:	603b      	str	r3, [r7, #0]
 8042878:	2600      	movs	r6, #0
 804287a:	4630      	mov	r0, r6
 804287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042880:	4e2e      	ldr	r6, [pc, #184]	; (804293c <_malloc_r+0xe4>)
 8042882:	f000 f89d 	bl	80429c0 <__malloc_lock>
 8042886:	6833      	ldr	r3, [r6, #0]
 8042888:	461c      	mov	r4, r3
 804288a:	bb34      	cbnz	r4, 80428da <_malloc_r+0x82>
 804288c:	4629      	mov	r1, r5
 804288e:	4638      	mov	r0, r7
 8042890:	f7ff ffc2 	bl	8042818 <sbrk_aligned>
 8042894:	1c43      	adds	r3, r0, #1
 8042896:	4604      	mov	r4, r0
 8042898:	d14d      	bne.n	8042936 <_malloc_r+0xde>
 804289a:	6834      	ldr	r4, [r6, #0]
 804289c:	4626      	mov	r6, r4
 804289e:	2e00      	cmp	r6, #0
 80428a0:	d140      	bne.n	8042924 <_malloc_r+0xcc>
 80428a2:	6823      	ldr	r3, [r4, #0]
 80428a4:	4631      	mov	r1, r6
 80428a6:	4638      	mov	r0, r7
 80428a8:	eb04 0803 	add.w	r8, r4, r3
 80428ac:	f000 f878 	bl	80429a0 <_sbrk_r>
 80428b0:	4580      	cmp	r8, r0
 80428b2:	d13a      	bne.n	804292a <_malloc_r+0xd2>
 80428b4:	6821      	ldr	r1, [r4, #0]
 80428b6:	3503      	adds	r5, #3
 80428b8:	1a6d      	subs	r5, r5, r1
 80428ba:	f025 0503 	bic.w	r5, r5, #3
 80428be:	3508      	adds	r5, #8
 80428c0:	2d0c      	cmp	r5, #12
 80428c2:	bf38      	it	cc
 80428c4:	250c      	movcc	r5, #12
 80428c6:	4629      	mov	r1, r5
 80428c8:	4638      	mov	r0, r7
 80428ca:	f7ff ffa5 	bl	8042818 <sbrk_aligned>
 80428ce:	3001      	adds	r0, #1
 80428d0:	d02b      	beq.n	804292a <_malloc_r+0xd2>
 80428d2:	6823      	ldr	r3, [r4, #0]
 80428d4:	442b      	add	r3, r5
 80428d6:	6023      	str	r3, [r4, #0]
 80428d8:	e00e      	b.n	80428f8 <_malloc_r+0xa0>
 80428da:	6822      	ldr	r2, [r4, #0]
 80428dc:	1b52      	subs	r2, r2, r5
 80428de:	d41e      	bmi.n	804291e <_malloc_r+0xc6>
 80428e0:	2a0b      	cmp	r2, #11
 80428e2:	d916      	bls.n	8042912 <_malloc_r+0xba>
 80428e4:	1961      	adds	r1, r4, r5
 80428e6:	42a3      	cmp	r3, r4
 80428e8:	6025      	str	r5, [r4, #0]
 80428ea:	bf18      	it	ne
 80428ec:	6059      	strne	r1, [r3, #4]
 80428ee:	6863      	ldr	r3, [r4, #4]
 80428f0:	bf08      	it	eq
 80428f2:	6031      	streq	r1, [r6, #0]
 80428f4:	5162      	str	r2, [r4, r5]
 80428f6:	604b      	str	r3, [r1, #4]
 80428f8:	4638      	mov	r0, r7
 80428fa:	f104 060b 	add.w	r6, r4, #11
 80428fe:	f000 f865 	bl	80429cc <__malloc_unlock>
 8042902:	f026 0607 	bic.w	r6, r6, #7
 8042906:	1d23      	adds	r3, r4, #4
 8042908:	1af2      	subs	r2, r6, r3
 804290a:	d0b6      	beq.n	804287a <_malloc_r+0x22>
 804290c:	1b9b      	subs	r3, r3, r6
 804290e:	50a3      	str	r3, [r4, r2]
 8042910:	e7b3      	b.n	804287a <_malloc_r+0x22>
 8042912:	6862      	ldr	r2, [r4, #4]
 8042914:	42a3      	cmp	r3, r4
 8042916:	bf0c      	ite	eq
 8042918:	6032      	streq	r2, [r6, #0]
 804291a:	605a      	strne	r2, [r3, #4]
 804291c:	e7ec      	b.n	80428f8 <_malloc_r+0xa0>
 804291e:	4623      	mov	r3, r4
 8042920:	6864      	ldr	r4, [r4, #4]
 8042922:	e7b2      	b.n	804288a <_malloc_r+0x32>
 8042924:	4634      	mov	r4, r6
 8042926:	6876      	ldr	r6, [r6, #4]
 8042928:	e7b9      	b.n	804289e <_malloc_r+0x46>
 804292a:	230c      	movs	r3, #12
 804292c:	603b      	str	r3, [r7, #0]
 804292e:	4638      	mov	r0, r7
 8042930:	f000 f84c 	bl	80429cc <__malloc_unlock>
 8042934:	e7a1      	b.n	804287a <_malloc_r+0x22>
 8042936:	6025      	str	r5, [r4, #0]
 8042938:	e7de      	b.n	80428f8 <_malloc_r+0xa0>
 804293a:	bf00      	nop
 804293c:	200000d8 	.word	0x200000d8

08042940 <_realloc_r>:
 8042940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042944:	4680      	mov	r8, r0
 8042946:	4614      	mov	r4, r2
 8042948:	460e      	mov	r6, r1
 804294a:	b921      	cbnz	r1, 8042956 <_realloc_r+0x16>
 804294c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8042950:	4611      	mov	r1, r2
 8042952:	f7ff bf81 	b.w	8042858 <_malloc_r>
 8042956:	b92a      	cbnz	r2, 8042964 <_realloc_r+0x24>
 8042958:	f7ff ff12 	bl	8042780 <_free_r>
 804295c:	4625      	mov	r5, r4
 804295e:	4628      	mov	r0, r5
 8042960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042964:	f000 f838 	bl	80429d8 <_malloc_usable_size_r>
 8042968:	4284      	cmp	r4, r0
 804296a:	4607      	mov	r7, r0
 804296c:	d802      	bhi.n	8042974 <_realloc_r+0x34>
 804296e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8042972:	d812      	bhi.n	804299a <_realloc_r+0x5a>
 8042974:	4621      	mov	r1, r4
 8042976:	4640      	mov	r0, r8
 8042978:	f7ff ff6e 	bl	8042858 <_malloc_r>
 804297c:	4605      	mov	r5, r0
 804297e:	2800      	cmp	r0, #0
 8042980:	d0ed      	beq.n	804295e <_realloc_r+0x1e>
 8042982:	42bc      	cmp	r4, r7
 8042984:	4622      	mov	r2, r4
 8042986:	4631      	mov	r1, r6
 8042988:	bf28      	it	cs
 804298a:	463a      	movcs	r2, r7
 804298c:	f7ff fed0 	bl	8042730 <memcpy>
 8042990:	4631      	mov	r1, r6
 8042992:	4640      	mov	r0, r8
 8042994:	f7ff fef4 	bl	8042780 <_free_r>
 8042998:	e7e1      	b.n	804295e <_realloc_r+0x1e>
 804299a:	4635      	mov	r5, r6
 804299c:	e7df      	b.n	804295e <_realloc_r+0x1e>
	...

080429a0 <_sbrk_r>:
 80429a0:	b538      	push	{r3, r4, r5, lr}
 80429a2:	4d06      	ldr	r5, [pc, #24]	; (80429bc <_sbrk_r+0x1c>)
 80429a4:	2300      	movs	r3, #0
 80429a6:	4604      	mov	r4, r0
 80429a8:	4608      	mov	r0, r1
 80429aa:	602b      	str	r3, [r5, #0]
 80429ac:	f7fd ffb8 	bl	8040920 <_sbrk>
 80429b0:	1c43      	adds	r3, r0, #1
 80429b2:	d102      	bne.n	80429ba <_sbrk_r+0x1a>
 80429b4:	682b      	ldr	r3, [r5, #0]
 80429b6:	b103      	cbz	r3, 80429ba <_sbrk_r+0x1a>
 80429b8:	6023      	str	r3, [r4, #0]
 80429ba:	bd38      	pop	{r3, r4, r5, pc}
 80429bc:	200000e0 	.word	0x200000e0

080429c0 <__malloc_lock>:
 80429c0:	4801      	ldr	r0, [pc, #4]	; (80429c8 <__malloc_lock+0x8>)
 80429c2:	f000 b811 	b.w	80429e8 <__retarget_lock_acquire_recursive>
 80429c6:	bf00      	nop
 80429c8:	200000e4 	.word	0x200000e4

080429cc <__malloc_unlock>:
 80429cc:	4801      	ldr	r0, [pc, #4]	; (80429d4 <__malloc_unlock+0x8>)
 80429ce:	f000 b80c 	b.w	80429ea <__retarget_lock_release_recursive>
 80429d2:	bf00      	nop
 80429d4:	200000e4 	.word	0x200000e4

080429d8 <_malloc_usable_size_r>:
 80429d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80429dc:	1f18      	subs	r0, r3, #4
 80429de:	2b00      	cmp	r3, #0
 80429e0:	bfbc      	itt	lt
 80429e2:	580b      	ldrlt	r3, [r1, r0]
 80429e4:	18c0      	addlt	r0, r0, r3
 80429e6:	4770      	bx	lr

080429e8 <__retarget_lock_acquire_recursive>:
 80429e8:	4770      	bx	lr

080429ea <__retarget_lock_release_recursive>:
 80429ea:	4770      	bx	lr

080429ec <_init>:
 80429ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80429ee:	bf00      	nop
 80429f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80429f2:	bc08      	pop	{r3}
 80429f4:	469e      	mov	lr, r3
 80429f6:	4770      	bx	lr

080429f8 <_fini>:
 80429f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80429fa:	bf00      	nop
 80429fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80429fe:	bc08      	pop	{r3}
 8042a00:	469e      	mov	lr, r3
 8042a02:	4770      	bx	lr
